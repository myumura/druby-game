<!DOCTYPE html>
<html>
<head>
  <title>3D Maze Game</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <style>
    body {
      margin: 0;
      overflow: hidden;
    }
    #game-container {
      position: relative;
      width: 100vw;
      height: 100vh;
    }
    #ui-overlay {
      position: absolute;
      top: 20px;
      left: 20px;
      color: white;
      font-family: Arial, sans-serif;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
      z-index: 100;
    }
    #login-form {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: rgba(0, 0, 0, 0.8);
      padding: 20px;
      border-radius: 10px;
      color: white;
      z-index: 1000;
    }
    #login-form input,
    #login-form select,
    #login-form button {
      display: block;
      margin: 10px 0;
      padding: 8px;
      width: 200px;
    }
    #login-form button {
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    #login-form button:hover {
      background-color: #45a049;
    }
    .hidden {
      display: none;
    }
    #restart-button {
      position: absolute;
      top: 20px;
      right: 20px;
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      display: none;
      z-index: 100;
    }
    #restart-button:hover {
      background-color: #45a049;
    }
    #mute-button {
      position: absolute;
      top: 70px;
      right: 20px;
      padding: 10px 20px;
      background-color: #FF6B6B;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      display: none;
      z-index: 100;
    }
    #mute-button:hover {
      background-color: #FF5252;
    }
    #mute-button.muted {
      background-color: #666;
    }
    #mute-button.muted:hover {
      background-color: #555;
    }
  </style>
</head>
<body>
  <div id="game-container">
    <div id="ui-overlay">
      <div id="status"></div>
    </div>
    <button id="restart-button" onclick="restartGame()">Restart Game</button>
    <button id="mute-button" onclick="toggleMute()">üîä Èü≥Èüø</button>
    <div id="login-form">
      <input type="text" id="player-name" placeholder="Enter your name">
      <select id="player-role">
        <option value="hunter">Hunter</option>
        <option value="survivor">Survivor</option>
      </select>
      <select id="player-avatar">
        <optgroup label="Hunter">
          <option value="ghost">Ghost</option>
          <option value="zombie">Zombie</option>
          <option value="vampire">Vampire</option>
        </optgroup>
        <optgroup label="Survivor">
          <option value="person">Person</option>
          <option value="man">Man</option>
          <option value="woman">Woman</option>
        </optgroup>
      </select>
      <button onclick="registerPlayer()">Join Game</button>
    </div>
  </div>

  <script>
    let ws;
    let playerName = '';
    let playerRole = '';
    let playerAvatar = '';
    let scene, camera, renderer;
    let maze = [];
    let player = {
      position: { x: 0.5, y: 0, z: 0.5 },
      rotation: { y: 0 },
      speed: 0.2,
      turnSpeed: 0.1
    };
    let keys = {};
    let gameState = {
      players: {},
      keys: [],
      obstacles: [],
      escape_point: [0, 0]
    };
    let playerAvatars = {}; // „Éó„É¨„Ç§„É§„Éº„ÅÆ„Ç¢„Éê„Çø„Éº„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Çí‰øùÂ≠ò

    // Èü≥Èüø„Ç∑„Çπ„ÉÜ„É†
    let audioContext;
    let sounds = {};
    let bgmSource;
    let isMuted = false;

    // Èü≥Èüø„Ç∑„Çπ„ÉÜ„É†„ÅÆÂàùÊúüÂåñ
    function initAudioSystem() {
      try {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        // ÂäπÊûúÈü≥„ÅÆÁîüÊàêÔºà„Éó„É≠„Ç∑„Éº„Ç∏„É£„É´Èü≥ÈüøÔºâ
        sounds = {
          footstep: createFootstepSound(),
          keyCollect: createKeyCollectSound(),
          escape: createEscapeSound(),
          caught: createCaughtSound(),
          ambient: createAmbientSound()
        };

        // Áí∞Â¢ÉÈü≥„ÅÆÈñãÂßãÔºàÂ∞ë„ÅóÈÅÖ„Çâ„Åõ„Å¶ÈñãÂßãÔºâ
        setTimeout(() => {
          if (sounds.ambient) {
            sounds.ambient();
          }
        }, 5000);
        
        console.log('Èü≥Èüø„Ç∑„Çπ„ÉÜ„É†„ÅåÂàùÊúüÂåñ„Åï„Çå„Åæ„Åó„Åü');
      } catch (error) {
        console.warn('Èü≥Èüø„Ç∑„Çπ„ÉÜ„É†„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
      }
    }

    // Ë∂≥Èü≥„ÅÆÁîüÊàêÔºà„É™„Ç¢„É´„Å™„Éà„Ç≥„Éà„Ç≥Èü≥„Å´Â§âÊõ¥Ôºâ
    let footstepAlternate = false; // Â∑¶Âè≥„ÅÆË∂≥Èü≥„Çí‰∫§‰∫í„Å´ÂÜçÁîü„Åô„Çã„Åü„ÇÅ„ÅÆ„Éï„É©„Ç∞
    let lastFootstepTime = 0; // ÊúÄÂæå„Å´Ë∂≥Èü≥„ÇíÂÜçÁîü„Åó„ÅüÊôÇÈñì
    
    function createFootstepSound() {
      return () => {
        if (!audioContext || isMuted) return;
        
        // Ë∂≥Èü≥„ÅÆÈñìÈöî„ÇíÂà∂ÈôêÔºàÊúÄ‰Ωé150msÈñìÈöîÔºâ
        const currentTime = audioContext.currentTime;
        if (currentTime - lastFootstepTime < 0.1) {
          return; // ÈñìÈöî„ÅåÁü≠„Åô„Åé„ÇãÂ†¥Âêà„ÅØÂÜçÁîü„Åó„Å™„ÅÑ
        }
        lastFootstepTime = currentTime;
        
        // „Ç∑„É≥„Éó„É´„ÅßÁü≠„ÅÑ„Éà„Ç≥„Éà„Ç≥Èü≥„Çí‰ΩúÊàê„Åô„ÇãÈñ¢Êï∞
        const createSimpleFootstep = (pitch, volume) => {
          // Áü≠„ÅÑ„ÇØ„É™„ÉÉ„ÇØÈü≥
          const osc = audioContext.createOscillator();
          const gain = audioContext.createGain();
          const filter = audioContext.createBiquadFilter();
          
          osc.connect(filter);
          filter.connect(gain);
          gain.connect(audioContext.destination);
          
          osc.type = 'triangle';
          osc.frequency.setValueAtTime(pitch, audioContext.currentTime);
          
          // „Éè„Ç§„Éë„Çπ„Éï„Ç£„É´„Çø„Éº„ÅßËªΩ„ÇÑ„Åã„Å™Èü≥„Å´
          filter.type = 'highpass';
          filter.frequency.setValueAtTime(pitch * 0.8, audioContext.currentTime);
          filter.Q.setValueAtTime(1, audioContext.currentTime);
          
          // ÈùûÂ∏∏„Å´Áü≠„ÅÑÈü≥Ôºà„Éà„Ç≥„Éà„Ç≥ÊÑü„ÇíÂá∫„Åô„Åü„ÇÅÔºâ
          gain.gain.setValueAtTime(0, audioContext.currentTime);
          gain.gain.linearRampToValueAtTime(volume * 0.1, audioContext.currentTime + 0.005);
          gain.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.04);
          
          osc.start(audioContext.currentTime);
          osc.stop(audioContext.currentTime + 0.05);
          
          // ËªΩ„ÅÑ„Äå„Éë„ÉÅ„ÉÉ„Äç„Å®„ÅÑ„ÅÜÈü≥„ÇíËøΩÂä†
          setTimeout(() => {
            const clickOsc = audioContext.createOscillator();
            const clickGain = audioContext.createGain();
            
            clickOsc.connect(clickGain);
            clickGain.connect(audioContext.destination);
            
            clickOsc.type = 'square';
            clickOsc.frequency.setValueAtTime(pitch * 2, audioContext.currentTime);
            
            clickGain.gain.setValueAtTime(0, audioContext.currentTime);
            clickGain.gain.linearRampToValueAtTime(volume * 0.05, audioContext.currentTime + 0.002);
            clickGain.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.02);
            
            clickOsc.start(audioContext.currentTime);
            clickOsc.stop(audioContext.currentTime + 0.025);
          }, 10);
        };
        
        // Â∑¶Âè≥„ÅÆË∂≥Èü≥„Çí‰∫§‰∫í„Å´ÂÜçÁîü„Åó„Å¶„Éà„Ç≥„Éà„Ç≥ÊÑü„ÇíÊºîÂá∫
        if (footstepAlternate) {
          // Âè≥Ë∂≥ - „Äå„Éà„Äç„ÅÆÈü≥
          createSimpleFootstep(400 + Math.random() * 100, 1.0);
        } else {
          // Â∑¶Ë∂≥ - „Äå„Ç≥„Äç„ÅÆÈü≥
          createSimpleFootstep(350 + Math.random() * 100, 0.9);
        }
        
        // Ê¨°Âõû„ÅØÂèçÂØæ„ÅÆË∂≥Èü≥„ÇíÂÜçÁîü
        footstepAlternate = !footstepAlternate;
      };
    }

    // ÈçµÂèñÂæóÈü≥„ÅÆÁîüÊàê
    function createKeyCollectSound() {
      return () => {
        if (!audioContext || isMuted) return;
        
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.type = 'sine';
        oscillator.frequency.setValueAtTime(523.25, audioContext.currentTime); // C5
        oscillator.frequency.linearRampToValueAtTime(783.99, audioContext.currentTime + 0.1); // G5
        oscillator.frequency.linearRampToValueAtTime(1046.50, audioContext.currentTime + 0.2); // C6
        
        gainNode.gain.setValueAtTime(0, audioContext.currentTime);
        gainNode.gain.linearRampToValueAtTime(0.3, audioContext.currentTime + 0.01);
        gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.3);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.3);
      };
    }

    // ËÑ±Âá∫ÊàêÂäüÈü≥„ÅÆÁîüÊàê
    function createEscapeSound() {
      return () => {
        if (!audioContext || isMuted) return;
        
        // ÂãùÂà©„ÅÆ„Éï„Ç°„É≥„Éï„Ç°„Éº„É¨
        const notes = [523.25, 659.25, 783.99, 1046.50]; // C-E-G-C
        
        notes.forEach((freq, index) => {
          const oscillator = audioContext.createOscillator();
          const gainNode = audioContext.createGain();
          
          oscillator.connect(gainNode);
          gainNode.connect(audioContext.destination);
          
          oscillator.type = 'triangle';
          oscillator.frequency.setValueAtTime(freq, audioContext.currentTime + index * 0.2);
          
          gainNode.gain.setValueAtTime(0, audioContext.currentTime + index * 0.2);
          gainNode.gain.linearRampToValueAtTime(0.15, audioContext.currentTime + index * 0.2 + 0.01);
          gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + index * 0.2 + 0.5);
          
          oscillator.start(audioContext.currentTime + index * 0.2);
          oscillator.stop(audioContext.currentTime + index * 0.2 + 0.5);
        });
      };
    }

    // ÊçïÁç≤Èü≥„ÅÆÁîüÊàêÔºà„Ç≤„Éº„É†„Ç™„Éº„Éê„ÉºÈ¢®„ÅÆÁü≠„ÅÑÈü≥Ôºâ
    function createCaughtSound() {
      return () => {
        if (!audioContext || isMuted) return;
        
        // Áü≠„ÅÑ„Äå„Éù„É≥„Äç„Å®„ÅÑ„ÅÜÈü≥„Çí3ÂõûÈÄ£Á∂ö„ÅßÂÜçÁîü
        const playGameOverNote = (frequency, delay, duration = 0.15) => {
          setTimeout(() => {
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.type = 'triangle';
            oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
            
            gainNode.gain.setValueAtTime(0, audioContext.currentTime);
            gainNode.gain.linearRampToValueAtTime(0.08, audioContext.currentTime + 0.01);
            gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + duration);
          }, delay);
        };
        
        // „Ç≤„Éº„É†„Ç™„Éº„Éê„Éº„ÅÆ‰∏ãÈôçÈü≥ÈöéÔºà„Éâ‚Üí„É©‚Üí„Éï„Ç°Ôºâ
        playGameOverNote(523.25, 0, 0.2);    // C5
        playGameOverNote(440.00, 200, 0.2);  // A4
        playGameOverNote(349.23, 400, 0.3);  // F4
      };
    }

    // Áí∞Â¢ÉÈü≥„ÅÆÁîüÊàê
    function createAmbientSound() {
      return () => {
        if (!audioContext || isMuted) return;
        
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        const filter = audioContext.createBiquadFilter();
        
        oscillator.connect(filter);
        filter.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.type = 'sine';
        oscillator.frequency.setValueAtTime(60 + Math.random() * 20, audioContext.currentTime);
        
        filter.type = 'lowpass';
        filter.frequency.setValueAtTime(200, audioContext.currentTime);
        
        gainNode.gain.setValueAtTime(0, audioContext.currentTime);
        gainNode.gain.linearRampToValueAtTime(0.05, audioContext.currentTime + 2);
        gainNode.gain.linearRampToValueAtTime(0.05, audioContext.currentTime + 8);
        gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 10);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 10);
        
        // 10ÁßíÂæå„Å´ÂÜçÂ∫¶ÂÜçÁîü
        setTimeout(() => {
          if (!isMuted) sounds.ambient();
        }, 10000);
      };
    }

    // BGM„ÅÆÈñãÂßã
    function startBackgroundMusic() {
      if (!audioContext || isMuted) return;
      
      // „Éù„ÉÉ„Éó„ÅßÊòé„Çã„ÅÑBGM
      const playBGMNote = (frequency, duration, delay = 0, noteType = 'triangle') => {
        setTimeout(() => {
          if (isMuted) return;
          
          const oscillator = audioContext.createOscillator();
          const gainNode = audioContext.createGain();
          
          oscillator.connect(gainNode);
          gainNode.connect(audioContext.destination);
          
          oscillator.type = noteType;
          oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
          
          gainNode.gain.setValueAtTime(0, audioContext.currentTime);
          gainNode.gain.linearRampToValueAtTime(0.12, audioContext.currentTime + 0.1);
          gainNode.gain.linearRampToValueAtTime(0.12, audioContext.currentTime + duration - 0.2);
          gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);
          
          oscillator.start(audioContext.currentTime);
          oscillator.stop(audioContext.currentTime + duration);
        }, delay);
      };
      
      // Êòé„Çã„ÅèÊ•Ω„Åó„ÅÑ„É°„É≠„Éá„Ç£„Éº„Éë„Çø„Éº„É≥
      const bgmPattern = () => {
        // C Major „Çπ„Ç±„Éº„É´„ÅÆÊòé„Çã„ÅÑ„É°„É≠„Éá„Ç£„Éº
        const melody1 = [
          { note: 523.25, duration: 0.8 }, // C5
          { note: 587.33, duration: 0.8 }, // D5
          { note: 659.25, duration: 0.8 }, // E5
          { note: 698.46, duration: 0.8 }, // F5
          { note: 783.99, duration: 1.2 }, // G5
          { note: 659.25, duration: 0.8 }, // E5
          { note: 523.25, duration: 1.2 }  // C5
        ];
        
        const melody2 = [
          { note: 783.99, duration: 0.8 }, // G5
          { note: 880.00, duration: 0.8 }, // A5
          { note: 783.99, duration: 0.8 }, // G5
          { note: 659.25, duration: 0.8 }, // E5
          { note: 698.46, duration: 1.2 }, // F5
          { note: 587.33, duration: 0.8 }, // D5
          { note: 523.25, duration: 1.2 }  // C5
        ];
        
        // „Éô„Éº„Çπ„É©„Ç§„É≥Ôºà‰ΩéÈü≥Ôºâ
        const bassLine = [
          { note: 261.63, duration: 2.4 }, // C4
          { note: 329.63, duration: 2.4 }, // E4
          { note: 349.23, duration: 2.4 }, // F4
          { note: 392.00, duration: 2.4 }  // G4
        ];
        
        let currentTime = 0;
        
        // „É°„É≠„Éá„Ç£„Éº1„ÇíÂÜçÁîü
        melody1.forEach((noteData, index) => {
          playBGMNote(noteData.note, noteData.duration, currentTime * 1000, 'triangle');
          currentTime += noteData.duration;
        });
        
        // Â∞ë„ÅóÈñì„ÇíÁ©∫„Åë„Å¶„É°„É≠„Éá„Ç£„Éº2„ÇíÂÜçÁîü
        currentTime += 0.5;
        const melody2StartTime = currentTime;
        
        melody2.forEach((noteData, index) => {
          playBGMNote(noteData.note, noteData.duration, currentTime * 1000, 'triangle');
          currentTime += noteData.duration;
        });
        
        // „Éô„Éº„Çπ„É©„Ç§„É≥„Çí‰∏¶Ë°å„Åó„Å¶ÂÜçÁîü
        let bassTime = 0;
        bassLine.forEach((noteData, index) => {
          playBGMNote(noteData.note, noteData.duration, bassTime * 1000, 'sine');
          bassTime += noteData.duration;
        });
        
        // „Éô„Éº„Çπ„É©„Ç§„É≥2ÂõûÁõÆ
        bassLine.forEach((noteData, index) => {
          playBGMNote(noteData.note, noteData.duration, (bassTime + melody2StartTime) * 1000, 'sine');
          bassTime += noteData.duration;
        });
        
        // ÂÖ®‰Ωì„ÅÆÈï∑„ÅïÂæå„Å´Áπ∞„ÇäËøî„Åó
        setTimeout(bgmPattern, (currentTime + 2) * 1000);
      };
      
      bgmPattern();
    }

    // Èü≥Èüø„ÅÆÂàá„ÇäÊõø„Åà
    function toggleMute() {
      isMuted = !isMuted;
      const muteButton = document.getElementById('mute-button');
      
      if (isMuted) {
        muteButton.textContent = 'üîá „Éü„É•„Éº„Éà';
        muteButton.classList.add('muted');
      } else {
        muteButton.textContent = 'üîä Èü≥Èüø';
        muteButton.classList.remove('muted');
      }
      
      console.log(isMuted ? 'Èü≥Èüø„Çí„Éü„É•„Éº„Éà„Åó„Åæ„Åó„Åü' : 'Èü≥Èüø„ÅÆ„Éü„É•„Éº„Éà„ÇíËß£Èô§„Åó„Åæ„Åó„Åü');
    }

    // „Ç≠„Éº„Éú„Éº„ÉâÂà∂Âæ°
    document.addEventListener('keydown', function(e) {
      switch(e.key) {
        case 'ArrowUp':
          keys['up'] = true;
          break;
        case 'ArrowDown':
          keys['down'] = true;
          break;
        case 'ArrowLeft':
          keys['left'] = true;
          break;
        case 'ArrowRight':
          keys['right'] = true;
          break;
        case 'm':
        case 'M':
          // M„Ç≠„Éº„Åß„Éü„É•„Éº„ÉàÂàá„ÇäÊõø„Åà
          if (audioContext) {
            toggleMute();
          }
          break;
      }
    });

    document.addEventListener('keyup', function(e) {
      switch(e.key) {
        case 'ArrowUp':
          keys['up'] = false;
          break;
        case 'ArrowDown':
          keys['down'] = false;
          break;
        case 'ArrowLeft':
          keys['left'] = false;
          break;
        case 'ArrowRight':
          keys['right'] = false;
          break;
      }
    });

    // Three.js„ÅÆÂàùÊúüÂåñ
    function initThreeJS() {
      scene = new THREE.Scene();
      scene.background = new THREE.Color(0x87CEEB); // Á©∫Ëâ≤„ÅÆËÉåÊôØ

      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.shadowMap.enabled = true;
      document.getElementById('game-container').appendChild(renderer.domElement);

      // ÂÖâÊ∫ê„ÅÆËøΩÂä†
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
      scene.add(ambientLight);

      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
      directionalLight.position.set(10, 20, 10);
      directionalLight.castShadow = true;
      directionalLight.shadow.mapSize.width = 2048;
      directionalLight.shadow.mapSize.height = 2048;
      directionalLight.shadow.camera.near = 0.5;
      directionalLight.shadow.camera.far = 50;
      scene.add(directionalLight);

      // „Éó„É¨„Ç§„É§„Éº„ÅÆÂàùÊúü‰ΩçÁΩÆ„ÇíË®≠ÂÆöÔºà‰∏≠Â§Æ„Åã„ÇâÂ∞ë„Åó„Åö„Çâ„ÅôÔºâ
      player.position = { x: 0.5, y: 0, z: 0.5 };
      player.rotation = { y: 0 };

      // „Ç´„É°„É©„ÅÆÂàùÊúü‰ΩçÁΩÆ
      camera.position.set(player.position.x, player.position.y + 1.6, player.position.z);
      camera.rotation.y = player.rotation.y;
    }

    // „Éó„É¨„Ç§„É§„Éº„ÅÆÁßªÂãï„ÇíÊõ¥Êñ∞
    function updatePlayerPosition() {
      const moveSpeed = 0.1;
      const rotateSpeed = 0.05;
      const playerRadius = 0.2; // „Éó„É¨„Ç§„É§„Éº„ÅÆÂçäÂæÑ

      // ÂâçÂõû„ÅÆ‰ΩçÁΩÆ„Çí‰øùÂ≠ò
      const previousPosition = { ...player.position };
      const previousRotation = { ...player.rotation };

      // ÁßªÂãï„Éï„É©„Ç∞
      let moved = false;

      // ÁßªÂãï„Å®ÂõûËª¢„ÅÆÂá¶ÁêÜ
      if (keys['up']) {
        player.position.x += Math.sin(player.rotation.y) * moveSpeed;
        player.position.z += Math.cos(player.rotation.y) * moveSpeed;
        moved = true;
      }
      if (keys['down']) {
        player.position.x -= Math.sin(player.rotation.y) * moveSpeed;
        player.position.z -= Math.cos(player.rotation.y) * moveSpeed;
        moved = true;
      }
      if (keys['left']) {
        player.rotation.y += rotateSpeed;
      }
      if (keys['right']) {
        player.rotation.y -= rotateSpeed;
      }

      // Â£Å„Å®„ÅÆË°ùÁ™ÅÂà§ÂÆö
      let collision = false;
      gameState.obstacles.forEach(obs => {
        const dx = player.position.x - obs.position[0];
        const dz = player.position.z - obs.position[1];
        const distance = Math.sqrt(dx * dx + dz * dz);
        
        // Â£Å„Å®„ÅÆË∑ùÈõ¢„Åå‰∏ÄÂÆö‰ª•‰∏ã„Å™„ÇâË°ùÁ™Å
        if (distance < playerRadius + 0.5) {
          collision = true;
        }
      });

      // Â§ñÂ£Å„Å®„ÅÆË°ùÁ™ÅÂà§ÂÆö
      const boundarySize = 8;
      if (Math.abs(player.position.x) > boundarySize - playerRadius || 
          Math.abs(player.position.z) > boundarySize - playerRadius) {
        collision = true;
      }

      // Ë°ùÁ™Å„Åó„ÅüÂ†¥Âêà„ÅØÂâçÂõû„ÅÆ‰ΩçÁΩÆ„Å´Êàª„Åô
      if (collision) {
        player.position = previousPosition;
        player.rotation = previousRotation;
      } else if (moved && sounds.footstep) {
        // ÁßªÂãïÊôÇ„Å´Ë∂≥Èü≥„ÇíÂÜçÁîüÔºàË°ùÁ™Å„Åó„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅÆ„ÅøÔºâ
        sounds.footstep();
      }

      // „Ç´„É°„É©„ÅÆ‰ΩçÁΩÆ„Å®ÂõûËª¢„ÇíÊõ¥Êñ∞
      camera.position.set(
        player.position.x,
        player.position.y + 1.6,
        player.position.z
      );
      camera.rotation.y = player.rotation.y;

      // „Çµ„Éº„Éê„Éº„Å´‰ΩçÁΩÆ„ÇíÈÄÅ‰ø°
      if (ws && ws.readyState === WebSocket.OPEN) {
        const message = {
          type: 'move',
          name: playerName,
          position: [player.position.x, player.position.z],
          rotation: player.rotation.y
        };
        ws.send(JSON.stringify(message));
      }
    }

    // Èçµ„ÅÆÂèñÂæóÂà§ÂÆö
    function checkKeyCollection() {
      const keyRadius = 0.5; // Èçµ„ÅÆÂèñÂæóÁØÑÂõ≤
      gameState.keys.forEach(key => {
        if (!key.found) {
          const dx = player.position.x - key.position[0];
          const dz = player.position.z - key.position[1];
          const distance = Math.sqrt(dx * dx + dz * dz);
          
          if (distance < keyRadius) {
            // „Çµ„Éº„Éê„Éº„Å´ÈçµÂèñÂæó„ÇíÈÄöÁü•
            if (ws && ws.readyState === WebSocket.OPEN) {
              ws.send(JSON.stringify({
                type: 'collect_key',
                key_id: key.id,
                name: playerName
              }));
            }
          }
        }
      });
    }

    // ËÑ±Âá∫Âà§ÂÆö
    function checkEscape() {
      if (gameState && gameState.game_state && playerRole === 'survivor') {
        const player = gameState.players[playerName];
        
        if (player) {
          if (player.keys_collected >= gameState.game_state.total_keys) {
            const dx = player.position[0] - gameState.escape_point[0];
            const dz = player.position[1] - gameState.escape_point[1];
            const distance = Math.sqrt(dx * dx + dz * dz);
            
            if (distance < 1.0) {
              if (ws && ws.readyState === WebSocket.OPEN) {
                const message = {
                  type: 'escape',
                  name: playerName,
                  position: player.position
                };
                ws.send(JSON.stringify(message));
              }
            }
          }
        }
      }
    }

    // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„É´„Éº„Éó
    let animationId;
    function animate() {
      animationId = requestAnimationFrame(animate);
      updatePlayerPosition();
      checkKeyCollection();
      checkEscape();
      renderer.render(scene, camera);
    }

    // „Éó„É¨„Ç§„É§„ÉºÁôªÈå≤
    function registerPlayer() {
      playerName = document.getElementById('player-name').value;
      playerRole = document.getElementById('player-role').value;
      playerAvatar = document.getElementById('player-avatar').value;
      
      if (ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
          type: 'register',
          name: playerName,
          role: playerRole,
          avatar: playerAvatar
        }));
      } else {
        alert('WebSocketÊé•Á∂ö„ÅåÁ¢∫Á´ã„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      }
    }

    // „Ç≤„Éº„É†Áä∂ÊÖã„ÅÆÊõ¥Êñ∞
    function updateGameState() {
      const statusDiv = document.getElementById('status');
      const restartButton = document.getElementById('restart-button');
      
      if (gameState && gameState.game_state) {
        let playersInfo = '';
        if (gameState.players) {
          const hunters = Object.entries(gameState.players).filter(([name, data]) => data.role === 'hunter');
          const survivors = Object.entries(gameState.players).filter(([name, data]) => data.role === 'survivor');
          
          playersInfo += '<h4>„Éó„É¨„Ç§„É§„Éº</h4>';
          
          if (hunters.length > 0) {
            playersInfo += '<p style="color: #ff6666;">„Éè„É≥„Çø„Éº:</p>';
            hunters.forEach(([name, data]) => {
              const status = data.caught ? ' (ÊçïÁç≤Ê∏à„Åø)' : data.escaped ? ' (ËÑ±Âá∫Ê∏à„Åø)' : '';
              playersInfo += `<span style="margin-left: 10px;">‚Ä¢ ${name} (${data.avatar})${status}</span><br>`;
            });
          }
          
          if (survivors.length > 0) {
            playersInfo += '<p style="color: #66ff66;">„Çµ„Éê„Ç§„Éê„Éº:</p>';
            survivors.forEach(([name, data]) => {
              const status = data.caught ? ' (Êçï„Åæ„Å£„Åü)' : data.escaped ? ' (ËÑ±Âá∫Ê∏à„Åø)' : '';
              const keys = data.keys_collected ? ` [Èçµ: ${data.keys_collected}]` : '';
              playersInfo += `<span style="margin-left: 10px;">‚Ä¢ ${name} (${data.avatar})${keys}${status}</span><br>`;
            });
          }
        }
        
        statusDiv.innerHTML = `
          <h3>Game Status</h3>
          <p>Keys Found: ${gameState.game_state.keys_found}/${gameState.game_state.total_keys}</p>
          <p>Time Remaining: ${Math.floor(gameState.game_state.time_remaining / 60)}:${(gameState.game_state.time_remaining % 60).toString().padStart(2, '0')}</p>
          ${playersInfo}
        `;

        // „Ç≤„Éº„É†„ÅåÈñãÂßã„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÄÅrestart„Éú„Çø„É≥„Å®„Éü„É•„Éº„Éà„Éú„Çø„É≥„ÇíË°®Á§∫
        if (gameState.game_state.game_started) {
          restartButton.style.display = 'block';
          document.getElementById('mute-button').style.display = 'block';
        }
      }
    }

    // „Ç≤„Éº„É†„ÅÆÂÜçÈñã
    function restartGame() {
      if (ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
          type: 'reset'
        }));
        
        // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÇíÂÅúÊ≠¢
        if (animationId) {
          cancelAnimationFrame(animationId);
          animationId = null;
        }

        // Three.js„ÅÆË¶ÅÁ¥†„ÇíÂÆåÂÖ®„Å´„ÇØ„É™„Ç¢
        if (renderer) {
          renderer.dispose();
          document.getElementById('game-container').removeChild(renderer.domElement);
        }
        if (scene) {
          while(scene.children.length > 0) { 
            scene.remove(scene.children[0]); 
          }
        }
        scene = null;
        camera = null;
        renderer = null;
        
        // „É≠„Ç∞„Ç§„É≥„Éï„Ç©„Éº„É†„ÇíË°®Á§∫
        document.getElementById('login-form').classList.remove('hidden');
        
        // „Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫„Çí„ÇØ„É™„Ç¢
        document.getElementById('status').innerHTML = '';
        
        // restart„Éú„Çø„É≥„ÇíÈùûË°®Á§∫
        document.getElementById('restart-button').style.display = 'none';
        
        // „Éó„É¨„Ç§„É§„ÉºÊÉÖÂ†±„Çí„É™„Çª„ÉÉ„Éà
        playerName = '';
        playerRole = '';
        playerAvatar = '';
        
        // ÂÖ•Âäõ„Éï„Ç©„Éº„É†„Çí„ÇØ„É™„Ç¢
        document.getElementById('player-name').value = '';
        document.getElementById('player-role').value = 'hunter';
        document.getElementById('player-avatar').value = 'ghost';

        // „Éó„É¨„Ç§„É§„Éº„ÅÆ‰ΩçÁΩÆ„Çí„É™„Çª„ÉÉ„Éà
        player.position = { x: 0.5, y: 0, z: 0.5 };
        player.rotation = { y: 0 };
        
        // „Éó„É¨„Ç§„É§„Éº„Ç¢„Éê„Çø„Éº„Çí„ÇØ„É™„Ç¢
        playerAvatars = {};
      }
    }

    // WebSocket„ÅÆË®≠ÂÆö
    function setupWebSocket() {
      ws = new WebSocket('ws://' + window.location.host + '/websocket');
      
      ws.onopen = function() {
        // WebSocketÊé•Á∂ö„ÅåÁ¢∫Á´ã„Åï„Çå„Åæ„Åó„Åü
      };
      
      ws.onmessage = function(event) {
        const data = JSON.parse(event.data);
        
        switch(data.type) {
          case 'register_success':
            document.getElementById('login-form').classList.add('hidden');
            initThreeJS();
            initAudioSystem(); // Èü≥Èüø„Ç∑„Çπ„ÉÜ„É†„ÅÆÂàùÊúüÂåñ
            generateMaze();
            // „Éó„É¨„Ç§„É§„Éº„ÅÆ‰ΩçÁΩÆ„Å®„Ç´„É°„É©„ÇíÂàùÊúüÂåñ
            player.position = { x: 0.5, y: 0, z: 0.5 };
            player.rotation = { y: 0 };
            camera.position.set(player.position.x, player.position.y + 1.6, player.position.z);
            camera.rotation.y = player.rotation.y;
            animate();
            break;
          case 'register_failed':
            alert(data.message);
            break;
          case 'game_state':
            // „Éó„É¨„Ç§„É§„Éº„ÅÆ‰ΩçÁΩÆÊÉÖÂ†±„ÇíÊõ¥Êñ∞
            if (data.state.players && data.state.players[playerName]) {
              const serverPlayer = data.state.players[playerName];
              if (serverPlayer.position) {
                player.position.x = serverPlayer.position[0];
                player.position.z = serverPlayer.position[1];
                player.rotation.y = serverPlayer.rotation;
              }
            }
            
            // Èçµ„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
            if (gameState && gameState.keys) {
              data.state.keys.forEach(newKey => {
                const existingKey = gameState.keys.find(k => k.id === newKey.id);
                if (existingKey && !existingKey.found && newKey.found) {
                  // ÈçµÂèñÂæóÈü≥„ÇíÂÜçÁîü
                  if (sounds.keyCollect) {
                    sounds.keyCollect();
                  }
                  
                  // ÂèñÂæó„Åï„Çå„ÅüÈçµ„ÇíÈùûË°®Á§∫„Å´„Åô„Çã
                  scene.children.forEach(child => {
                    if (child.userData.keyId === newKey.id) {
                      scene.remove(child);
                    }
                  });
                }
              });
            }

            // „Éû„ÉÉ„Éó„ÅÆÁä∂ÊÖã„ÅåÂ§â„Çè„Å£„ÅüÂ†¥ÂêàÔºà„É™„Çª„ÉÉ„ÉàÂæå„Å™„Å©Ôºâ„ÄÅËø∑Ë∑Ø„ÇíÂÜçÁîüÊàê
            if (!gameState || 
                JSON.stringify(gameState.obstacles) !== JSON.stringify(data.state.obstacles) ||
                JSON.stringify(gameState.escape_point) !== JSON.stringify(data.state.escape_point)) {
              // „Ç∑„Éº„É≥„Çí„ÇØ„É™„Ç¢ÔºàÂÆâÂÖ®„Å´Ôºâ
              if (scene && scene.children) {
                const children = [...scene.children];
                children.forEach(child => {
                  if (child !== camera) {
                    scene.remove(child);
                  }
                });
              }

              // ÂÖâÊ∫ê„ÅÆÂÜçË®≠ÂÆö
              const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
              scene.add(ambientLight);

              const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
              directionalLight.position.set(10, 20, 10);
              directionalLight.castShadow = true;
              directionalLight.shadow.mapSize.width = 2048;
              directionalLight.shadow.mapSize.height = 2048;
              directionalLight.shadow.camera.near = 0.5;
              directionalLight.shadow.camera.far = 50;
              scene.add(directionalLight);

              // Ëø∑Ë∑Ø„ÇíÂÜçÁîüÊàê
              gameState = data.state;
              generateMaze();
            } else {
              gameState = data.state;
            }

            // „Éó„É¨„Ç§„É§„Éº„Ç¢„Éê„Çø„Éº„ÇíÊõ¥Êñ∞
            updatePlayerAvatars();

            updateGameState();

            // ËÑ±Âá∫ÂèØËÉΩ„Å™Â†¥Âêà„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
            if (gameState.game_state.keys_found >= gameState.game_state.total_keys) {
              const statusDiv = document.getElementById('status');
              statusDiv.innerHTML += '<p style="color: green;">ËÑ±Âá∫ÂèØËÉΩÔºÅÂá∫Âè£„Å´Âêë„Åã„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</p>';
            }

            // „Ç≤„Éº„É†ÁµÇ‰∫ÜÁä∂ÊÖã„ÅÆÁ¢∫Ë™ç
            if (gameState.game_state.game_over) {
              const statusDiv = document.getElementById('status');
              if (gameState.game_state.winner === 'survivors') {
                statusDiv.innerHTML = '<h2 style="color: green;">ËÑ±Âá∫ÊàêÂäüÔºÅ</h2>';
                
                // ËÑ±Âá∫ÊàêÂäüÈü≥„ÇíÂÜçÁîü
                if (sounds.escape) {
                  sounds.escape();
                }
                
                // ËÑ±Âá∫ÊàêÂäüÊôÇ„ÅÆ„Ç®„Éï„Çß„ÇØ„Éà
                const successGeometry = new THREE.SphereGeometry(5, 32, 32);
                const successMaterial = new THREE.MeshPhongMaterial({
                  color: 0x00ff00,
                  transparent: true,
                  opacity: 0.5
                });
                const successSphere = new THREE.Mesh(successGeometry, successMaterial);
                successSphere.position.set(0, 0, 0);
                scene.add(successSphere);

                // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÇíÂÅúÊ≠¢
                cancelAnimationFrame(animationId);
              } else {
                statusDiv.innerHTML = '<h2 style="color: red;">„Ç≤„Éº„É†„Ç™„Éº„Éê„Éº</h2>';
                
                // ÊçïÁç≤Èü≥„ÇíÂÜçÁîü
                if (sounds.caught) {
                  sounds.caught();
                }
              }
            }
            break;
          case 'player_joined':
            console.log('Êñ∞„Åó„ÅÑ„Éó„É¨„Ç§„É§„Éº„ÅåÂèÇÂä†„Åó„Åæ„Åó„Åü:', data.name);
            break;
          case 'player_left':
            console.log('„Éó„É¨„Ç§„É§„Éº„ÅåÈÄÄÂá∫„Åó„Åæ„Åó„Åü:', data.name);
            break;
          case 'game_over':
            console.log('„Ç≤„Éº„É†ÁµÇ‰∫Ü:', data.message);
            const statusDiv = document.getElementById('status');
            statusDiv.innerHTML = `<h2 style="color: ${data.winner === 'survivors' ? 'green' : 'red'}">${data.message}</h2>`;
            break;
        }
      };
      
      ws.onclose = function() {
        console.log('WebSocketÊé•Á∂ö„ÅåÂàáÊñ≠„Åï„Çå„Åæ„Åó„Åü');
      };
    }

    // „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÊôÇ„ÅÆÂàùÊúüÂåñ
    window.onload = function() {
      // „Ç∑„Éº„É≥„ÅÆÂàùÊúüÂåñ
      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.shadowMap.enabled = true;
      document.body.appendChild(renderer.domElement);

      // „Ç´„É°„É©„ÅÆÂàùÊúü‰ΩçÁΩÆË®≠ÂÆö
      camera.position.set(0, 5, 10);
      camera.lookAt(0, 0, 0);

      setupWebSocket();
    };

    // „Ç¶„Ç£„É≥„Éâ„Ç¶„É™„Çµ„Ç§„Ç∫ÊôÇ„ÅÆÂá¶ÁêÜ
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });

    // „Éó„É¨„Ç§„É§„Éº„Ç¢„Éê„Çø„Éº„ÅÆ‰ΩúÊàê
    function createPlayerAvatar(avatarType, role) {
      const avatarGroup = new THREE.Group();
      
      // Âü∫Êú¨ÁöÑ„Å™‰Ωì„ÅÆÂΩ¢Áä∂
      const bodyGeometry = new THREE.CylinderGeometry(0.2, 0.2, 1.2, 8);
      let bodyMaterial;
      
      // „É≠„Éº„É´„Å®„Ç¢„Éê„Çø„Éº„Çø„Ç§„Éó„Å´Âøú„Åò„Å¶Ëâ≤„ÇíË®≠ÂÆö
      if (role === 'hunter') {
        switch(avatarType) {
          case 'ghost':
            bodyMaterial = new THREE.MeshPhongMaterial({ 
              color: 0xffffff, 
              transparent: true, 
              opacity: 0.7 
            });
            break;
          case 'zombie':
            bodyMaterial = new THREE.MeshPhongMaterial({ color: 0x228B22 });
            break;
          case 'vampire':
            bodyMaterial = new THREE.MeshPhongMaterial({ color: 0x8B0000 });
            break;
          default:
            bodyMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000 });
        }
      } else {
        switch(avatarType) {
          case 'person':
            bodyMaterial = new THREE.MeshPhongMaterial({ color: 0x0000ff });
            break;
          case 'man':
            bodyMaterial = new THREE.MeshPhongMaterial({ color: 0x4169E1 });
            break;
          case 'woman':
            bodyMaterial = new THREE.MeshPhongMaterial({ color: 0xFF69B4 });
            break;
          default:
            bodyMaterial = new THREE.MeshPhongMaterial({ color: 0x0000ff });
        }
      }
      
      const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
      body.position.y = 0.6;
      body.castShadow = true;
      avatarGroup.add(body);
      
      // È†≠ÈÉ®
      const headGeometry = new THREE.SphereGeometry(0.15, 16, 16);
      const headMaterial = new THREE.MeshPhongMaterial({ 
        color: role === 'hunter' ? 0xffcccc : 0xffddaa 
      });
      const head = new THREE.Mesh(headGeometry, headMaterial);
      head.position.y = 1.35;
      head.castShadow = true;
      avatarGroup.add(head);
      
      // ÂêçÂâçË°®Á§∫Áî®„ÅÆ„ÉÜ„Ç≠„Çπ„ÉàÔºàÁ∞°ÊòìÁâà„Å®„Åó„Å¶Ëâ≤‰ªò„Åç„ÅÆÁêÉ‰Ωì„ÇíÈ†≠‰∏ä„Å´ÈÖçÁΩÆÔºâ
      const nameIndicatorGeometry = new THREE.SphereGeometry(0.05, 8, 8);
      const nameIndicatorMaterial = new THREE.MeshPhongMaterial({ 
        color: role === 'hunter' ? 0xff0000 : 0x00ff00,
        emissive: role === 'hunter' ? 0x440000 : 0x004400
      });
      const nameIndicator = new THREE.Mesh(nameIndicatorGeometry, nameIndicatorMaterial);
      nameIndicator.position.y = 1.7;
      avatarGroup.add(nameIndicator);
      
      return avatarGroup;
    }

    // „Éó„É¨„Ç§„É§„Éº„Ç¢„Éê„Çø„Éº„ÅÆÊõ¥Êñ∞
    function updatePlayerAvatars() {
      if (!gameState.players) return;
      
      // ÁèæÂú®„ÅÆ„Éó„É¨„Ç§„É§„Éº„É™„Çπ„Éà„ÇíÂèñÂæó
      const currentPlayers = Object.keys(gameState.players);
      
      // ÂâäÈô§„Åï„Çå„Åü„Éó„É¨„Ç§„É§„Éº„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÂâäÈô§
      Object.keys(playerAvatars).forEach(avatarPlayerName => {
        if (!currentPlayers.includes(avatarPlayerName)) {
          scene.remove(playerAvatars[avatarPlayerName]);
          delete playerAvatars[avatarPlayerName];
        }
      });
      
      // ÂêÑ„Éó„É¨„Ç§„É§„Éº„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÊõ¥Êñ∞
      Object.entries(gameState.players).forEach(([name, playerData]) => {
        // Ëá™ÂàÜËá™Ë∫´„ÅÆ„Ç¢„Éê„Çø„Éº„ÅØË°®Á§∫„Åó„Å™„ÅÑ
        if (name === playerName) return;
        
        // Êñ∞„Åó„ÅÑ„Éó„É¨„Ç§„É§„Éº„ÅÆ„Ç¢„Éê„Çø„Éº„Çí‰ΩúÊàê
        if (!playerAvatars[name]) {
          console.log(`Creating avatar for player: ${name} (${playerData.role}, ${playerData.avatar})`);
          playerAvatars[name] = createPlayerAvatar(playerData.avatar, playerData.role);
          scene.add(playerAvatars[name]);
        }
        
        // „Ç¢„Éê„Çø„Éº„ÅÆ‰ΩçÁΩÆ„ÇíÊõ¥Êñ∞
        if (playerData.position) {
          playerAvatars[name].position.set(
            playerData.position[0],
            0,
            playerData.position[1]
          );
          playerAvatars[name].rotation.y = playerData.rotation || 0;
        }
        
        // Êçï„Åæ„Å£„Åü„Éó„É¨„Ç§„É§„Éº„ÇÑËÑ±Âá∫„Åó„Åü„Éó„É¨„Ç§„É§„Éº„ÅÆË°®Á§∫„ÇíÂ§âÊõ¥
        if (playerData.caught) {
          playerAvatars[name].visible = false;
        } else if (playerData.escaped) {
          // ËÑ±Âá∫„Åó„Åü„Éó„É¨„Ç§„É§„Éº„ÅØÁ∑ëËâ≤„Å´ÂÖâ„Çâ„Åõ„Çã
          playerAvatars[name].children.forEach(child => {
            if (child.material) {
              child.material.emissive = new THREE.Color(0x004400);
            }
          });
        } else {
          playerAvatars[name].visible = true;
        }
      });
    }

    // Ëø∑Ë∑Ø„ÅÆÁîüÊàê
    function generateMaze() {
      const wallGeometry = new THREE.BoxGeometry(1, 4, 1);
      
      // Â£Å„ÅÆ„ÉÜ„ÇØ„Çπ„ÉÅ„É£„Çí‰ΩúÊàêÔºà„É¨„É≥„Ç¨Ê®°ÊßòÔºâ
      const wallCanvas = document.createElement('canvas');
      wallCanvas.width = 256;
      wallCanvas.height = 256;
      const wallCtx = wallCanvas.getContext('2d');
      
      // „É¨„É≥„Ç¨„ÅÆËÉåÊôØËâ≤
      wallCtx.fillStyle = '#8B4513';
      wallCtx.fillRect(0, 0, 256, 256);
      
      // „É¨„É≥„Ç¨„ÅÆ„Éë„Çø„Éº„É≥„ÇíÊèèÁîª
      wallCtx.fillStyle = '#A0522D';
      wallCtx.strokeStyle = '#654321';
      wallCtx.lineWidth = 2;
      
      const brickWidth = 64;
      const brickHeight = 32;
      
      for (let y = 0; y < 256; y += brickHeight) {
        for (let x = 0; x < 256; x += brickWidth) {
          const offsetX = (Math.floor(y / brickHeight) % 2) * (brickWidth / 2);
          const brickX = (x + offsetX) % 256;
          
          wallCtx.fillRect(brickX, y, brickWidth - 2, brickHeight - 2);
          wallCtx.strokeRect(brickX, y, brickWidth - 2, brickHeight - 2);
        }
      }
      
      const wallTexture = new THREE.CanvasTexture(wallCanvas);
      wallTexture.wrapS = THREE.RepeatWrapping;
      wallTexture.wrapT = THREE.RepeatWrapping;
      wallTexture.repeat.set(1, 2);
      
      const wallMaterial = new THREE.MeshPhongMaterial({ 
        map: wallTexture,
        shininess: 10
      });
      
      const floorGeometry = new THREE.PlaneGeometry(100, 100);
      
      // Â∫ä„ÅÆ„ÉÜ„ÇØ„Çπ„ÉÅ„É£„Çí‰ΩúÊàêÔºàÁü≥Áï≥Ê®°ÊßòÔºâ
      const floorCanvas = document.createElement('canvas');
      floorCanvas.width = 256;
      floorCanvas.height = 256;
      const floorCtx = floorCanvas.getContext('2d');
      
      // Áü≥Áï≥„ÅÆËÉåÊôØËâ≤
      floorCtx.fillStyle = '#696969';
      floorCtx.fillRect(0, 0, 256, 256);
      
      // Áü≥Áï≥„ÅÆ„Éë„Çø„Éº„É≥„ÇíÊèèÁîª
      floorCtx.strokeStyle = '#2F4F4F';
      floorCtx.lineWidth = 3;
      
      const stoneSize = 32;
      
      for (let y = 0; y < 256; y += stoneSize) {
        for (let x = 0; x < 256; x += stoneSize) {
          // ÂêÑÁü≥„Å´Â∞ë„ÅóÁï∞„Å™„ÇãËâ≤„Çí‰ªò„Åë„Çã
          const variation = Math.random() * 0.3 - 0.15;
          const gray = Math.floor(105 + variation * 50);
          floorCtx.fillStyle = `rgb(${gray}, ${gray}, ${gray})`;
          floorCtx.fillRect(x + 1, y + 1, stoneSize - 2, stoneSize - 2);
          floorCtx.strokeRect(x, y, stoneSize, stoneSize);
        }
      }
      
      const floorTexture = new THREE.CanvasTexture(floorCanvas);
      floorTexture.wrapS = THREE.RepeatWrapping;
      floorTexture.wrapT = THREE.RepeatWrapping;
      floorTexture.repeat.set(20, 20);
      
      const floorMaterial = new THREE.MeshPhongMaterial({ 
        map: floorTexture,
        shininess: 5
      });

      // Â∫ä„ÅÆËøΩÂä†
      const floor = new THREE.Mesh(floorGeometry, floorMaterial);
      floor.rotation.x = -Math.PI / 2;
      floor.position.y = -1;
      floor.receiveShadow = true;
      scene.add(floor);

      // Â£Å„ÅÆËøΩÂä†
      gameState.obstacles.forEach(obs => {
        const wall = new THREE.Mesh(wallGeometry, wallMaterial);
        wall.position.set(obs.position[0], 1, obs.position[1]);
        wall.castShadow = true;
        wall.receiveShadow = true;
        scene.add(wall);
      });

      // ËÑ±Âá∫Âú∞ÁÇπ„ÅÆËøΩÂä†
      const escapeGeometry = new THREE.BoxGeometry(1, 0.1, 1);
      const escapeMaterial = new THREE.MeshPhongMaterial({ 
        color: 0x00ffff,  // „Çà„ÇäÁõÆÁ´ã„Å§Ê∞¥Ëâ≤„Å´Â§âÊõ¥
        shininess: 100,
        transparent: true,
        opacity: 0.7
      });
      const escape = new THREE.Mesh(escapeGeometry, escapeMaterial);
      escape.position.set(gameState.escape_point[0], 0.05, gameState.escape_point[1]);
      scene.add(escape);

      // ËÑ±Âá∫Âú∞ÁÇπ„ÅÆÂÖâ„Çã„Ç®„Éï„Çß„ÇØ„Éà
      const glowGeometry = new THREE.SphereGeometry(1.5, 32, 32);
      const glowMaterial = new THREE.MeshPhongMaterial({
        color: 0x00ffff,
        transparent: true,
        opacity: 0.2,
        side: THREE.DoubleSide
      });
      const glow = new THREE.Mesh(glowGeometry, glowMaterial);
      glow.position.set(gameState.escape_point[0], 1, gameState.escape_point[1]);
      scene.add(glow);

      // ËÑ±Âá∫Âú∞ÁÇπ„ÅÆÁü¢Âç∞
      const arrowGeometry = new THREE.ConeGeometry(0.3, 1, 32);
      const arrowMaterial = new THREE.MeshPhongMaterial({
        color: 0x00ffff,
        shininess: 100
      });
      const arrow = new THREE.Mesh(arrowGeometry, arrowMaterial);
      arrow.position.set(gameState.escape_point[0], 2, gameState.escape_point[1]);
      arrow.rotation.x = Math.PI;  // ‰∏ãÂêë„Åç„Å´
      scene.add(arrow);

      // ËÑ±Âá∫Âú∞ÁÇπ„ÅÆÁÇπÊªÖ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
      let time = 0;
      const animateEscape = () => {
        if (glow.parent) {
          time += 0.05;
          glow.material.opacity = 0.1 + Math.sin(time) * 0.1;
          glow.scale.set(1 + Math.sin(time) * 0.2, 1 + Math.sin(time) * 0.2, 1 + Math.sin(time) * 0.2);
          requestAnimationFrame(animateEscape);
        }
      };
      animateEscape();

      // ËÑ±Âá∫Âú∞ÁÇπ„ÅÆË¶ñË¶öÁöÑ„Å™ÁõÆÂç∞„ÇíËøΩÂä†
      const markerGeometry = new THREE.CylinderGeometry(0.5, 0.5, 2, 32);
      const markerMaterial = new THREE.MeshPhongMaterial({
        color: 0x00ffff,
        transparent: true,
        opacity: 0.3
      });
      const marker = new THREE.Mesh(markerGeometry, markerMaterial);
      marker.position.set(gameState.escape_point[0], 1, gameState.escape_point[1]);
      scene.add(marker);

      // Èçµ„ÅÆËøΩÂä†ÔºàÊú™ÂèñÂæó„ÅÆ„ÇÇ„ÅÆ„ÅÆ„ÅøÔºâ
      gameState.keys.forEach(key => {
        if (!key.found) {
          // Èçµ„ÅÆ„Ç∞„É´„Éº„Éó„Çí‰ΩúÊàê
          const keyGroup = new THREE.Group();
          keyGroup.position.set(key.position[0], 0.5, key.position[1]);

          // Èçµ„ÅÆÈ†≠ÈÉ®ÂàÜÔºà„É™„É≥„Ç∞Ôºâ
          const keyRingGeometry = new THREE.TorusGeometry(0.15, 0.03, 16, 32);
          const keyRingMaterial = new THREE.MeshPhongMaterial({ 
            color: 0xffd700,
            shininess: 100
          });
          const keyRing = new THREE.Mesh(keyRingGeometry, keyRingMaterial);
          // „É™„É≥„Ç∞„ÇíÂûÇÁõ¥„Å´ÈÖçÁΩÆ
          keyRing.rotation.y = Math.PI / 2;
          keyGroup.add(keyRing);

          // Èçµ„ÅÆËÉ¥‰ΩìÈÉ®ÂàÜ
          const keyBodyGeometry = new THREE.CylinderGeometry(0.03, 0.03, 0.3, 16);
          const keyBodyMaterial = new THREE.MeshPhongMaterial({ 
            color: 0xffd700,
            shininess: 100
          });
          const keyBody = new THREE.Mesh(keyBodyGeometry, keyBodyMaterial);
          // ËÉ¥‰Ωì„Çí„É™„É≥„Ç∞„ÅÆÂ§ñÂÅ¥„Å´ÈÖçÁΩÆ„Åó„ÄÅÁ∏¶‰ΩçÁΩÆ„ÇíÊèÉ„Åà„Çã
          keyBody.position.set(0, -0.3, 0);
          keyGroup.add(keyBody);

          // Èçµ„ÅÆÊ≠ØÈÉ®ÂàÜÔºà2Êú¨Ôºâ
          const keyTeethMaterial = new THREE.MeshPhongMaterial({ 
            color: 0xffd700,
            shininess: 100
          });

          // 1Êú¨ÁõÆ„ÅÆÊ≠Ø
          const keyTeeth1Geometry = new THREE.BoxGeometry(0.15, 0.03, 0.03);
          const keyTeeth1 = new THREE.Mesh(keyTeeth1Geometry, keyTeethMaterial);
          keyTeeth1.position.set(0, -0.3, -0.04);
          // Ê≠ØÈÉ®ÂàÜ„Çí„É™„É≥„Ç∞„Å®Âπ≥Ë°å„Å´
          keyTeeth1.rotation.y = Math.PI / 2;
          keyGroup.add(keyTeeth1);

          // 2Êú¨ÁõÆ„ÅÆÊ≠Ø
          const keyTeeth2Geometry = new THREE.BoxGeometry(0.15, 0.03, 0.03);
          const keyTeeth2 = new THREE.Mesh(keyTeeth2Geometry, keyTeethMaterial);
          keyTeeth2.position.set(0, -0.45, -0.04);
          // Ê≠ØÈÉ®ÂàÜ„Çí„É™„É≥„Ç∞„Å®Âπ≥Ë°å„Å´
          keyTeeth2.rotation.y = Math.PI / 2;
          keyGroup.add(keyTeeth2);

          // ÂΩ±„ÅÆË®≠ÂÆö
          keyGroup.traverse((object) => {
            if (object instanceof THREE.Mesh) {
              object.castShadow = true;
            }
          });

          // Èçµ„ÅÆID„Çí‰øùÂ≠ò
          keyGroup.userData.keyId = key.id;

          // ÊµÆÈÅä„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
          let time = 0;
          const animate = () => {
            if (keyGroup.parent) {
              time += 0.02;
              // ‰∏ä‰∏ã„ÅÆÊµÆÈÅä
              keyGroup.position.y = 0.5 + Math.sin(time) * 0.1;
              // ÂõûËª¢
              keyGroup.rotation.y += 0.01;
              requestAnimationFrame(animate);
            }
          };
          animate();

          scene.add(keyGroup);
        }
      });

      // Ëø∑Ë∑Ø„ÅÆÂ¢ÉÁïå„ÇíËøΩÂä†
      const boundaryGeometry = new THREE.BoxGeometry(1, 4, 1);

      // Â§ñÂ£Å„ÇíËøΩÂä†ÔºàÂÜÖÂ£Å„Å®Âêå„Åò„É¨„É≥„Ç¨„ÉÜ„ÇØ„Çπ„ÉÅ„É£„Çí‰ΩøÁî®Ôºâ
      for (let x = -8; x <= 8; x++) {
        for (let z = -8; z <= 8; z++) {
          if (x === -8 || x === 8 || z === -8 || z === 8) {
            const wall = new THREE.Mesh(boundaryGeometry, wallMaterial);
            wall.position.set(x, 1, z);
            wall.castShadow = true;
            wall.receiveShadow = true;
            scene.add(wall);
          }
        }
      }

      // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„É´„Éº„Éó
      function animate() {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
      }
      animate();

      // „Ç≤„Éº„É†„É´„Éº„Éó
      function gameLoop() {
        requestAnimationFrame(gameLoop);
        // „Éó„É¨„Ç§„É§„Éº„ÅÆÁßªÂãïÂá¶ÁêÜ
        if (keys.ArrowUp) movePlayer('up');
        if (keys.ArrowDown) movePlayer('down');
        if (keys.ArrowLeft) movePlayer('left');
        if (keys.ArrowRight) movePlayer('right');
      }
      gameLoop();
    }
  </script>
</body>
</html>
