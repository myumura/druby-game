<!DOCTYPE html>
<html>
<head>
  <title>3D Maze Game</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <style>
    body {
      margin: 0;
      overflow: hidden;
    }
    #game-container {
      position: relative;
      width: 100vw;
      height: 100vh;
    }
    #ui-overlay {
      position: absolute;
      top: 20px;
      left: 20px;
      color: white;
      font-family: Arial, sans-serif;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
      z-index: 100;
    }
    #login-form {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: rgba(0, 0, 0, 0.8);
      padding: 20px;
      border-radius: 10px;
      color: white;
      z-index: 1000;
    }
    #login-form input,
    #login-form select,
    #login-form button {
      display: block;
      margin: 10px 0;
      padding: 8px;
      width: 200px;
    }
    #login-form button {
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    #login-form button:hover {
      background-color: #45a049;
    }
    .hidden {
      display: none;
    }
    #restart-button {
      position: absolute;
      top: 20px;
      right: 20px;
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      display: none;
      z-index: 100;
    }
    #restart-button:hover {
      background-color: #45a049;
    }
  </style>
</head>
<body>
  <div id="game-container">
    <div id="ui-overlay">
      <div id="status"></div>
    </div>
    <button id="restart-button" onclick="restartGame()">Restart Game</button>
    <div id="login-form">
      <input type="text" id="player-name" placeholder="Enter your name">
      <select id="player-role">
        <option value="hunter">Hunter</option>
        <option value="survivor">Survivor</option>
      </select>
      <select id="player-avatar">
        <optgroup label="Hunter">
          <option value="ghost">Ghost</option>
          <option value="zombie">Zombie</option>
          <option value="vampire">Vampire</option>
        </optgroup>
        <optgroup label="Survivor">
          <option value="person">Person</option>
          <option value="man">Man</option>
          <option value="woman">Woman</option>
        </optgroup>
      </select>
      <button onclick="registerPlayer()">Join Game</button>
    </div>
  </div>

  <script>
    let ws;
    let playerName = '';
    let playerRole = '';
    let playerAvatar = '';
    let scene, camera, renderer;
    let maze = [];
    let player = {
      position: { x: 0.5, y: 0, z: 0.5 },
      rotation: { y: 0 },
      speed: 0.2,
      turnSpeed: 0.1
    };
    let keys = {};
    let gameState = {
      players: {},
      keys: [],
      obstacles: [],
      escape_point: [0, 0]
    };
    let playerAvatars = {}; // プレイヤーのアバターオブジェクトを保存

    // キーボード制御
    document.addEventListener('keydown', function(e) {
      switch(e.key) {
        case 'ArrowUp':
          keys['up'] = true;
          break;
        case 'ArrowDown':
          keys['down'] = true;
          break;
        case 'ArrowLeft':
          keys['left'] = true;
          break;
        case 'ArrowRight':
          keys['right'] = true;
          break;
      }
    });

    document.addEventListener('keyup', function(e) {
      switch(e.key) {
        case 'ArrowUp':
          keys['up'] = false;
          break;
        case 'ArrowDown':
          keys['down'] = false;
          break;
        case 'ArrowLeft':
          keys['left'] = false;
          break;
        case 'ArrowRight':
          keys['right'] = false;
          break;
      }
    });

    // Three.jsの初期化
    function initThreeJS() {
      scene = new THREE.Scene();
      scene.background = new THREE.Color(0x87CEEB); // 空色の背景

      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.shadowMap.enabled = true;
      document.getElementById('game-container').appendChild(renderer.domElement);

      // 光源の追加
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
      scene.add(ambientLight);

      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
      directionalLight.position.set(10, 20, 10);
      directionalLight.castShadow = true;
      directionalLight.shadow.mapSize.width = 2048;
      directionalLight.shadow.mapSize.height = 2048;
      directionalLight.shadow.camera.near = 0.5;
      directionalLight.shadow.camera.far = 50;
      scene.add(directionalLight);

      // プレイヤーの初期位置を設定（中央から少しずらす）
      player.position = { x: 0.5, y: 0, z: 0.5 };
      player.rotation = { y: 0 };

      // カメラの初期位置
      camera.position.set(player.position.x, player.position.y + 1.6, player.position.z);
      camera.rotation.y = player.rotation.y;
    }

    // プレイヤーの移動を更新
    function updatePlayerPosition() {
      const moveSpeed = 0.1;
      const rotateSpeed = 0.05;
      const playerRadius = 0.2; // プレイヤーの半径

      // 前回の位置を保存
      const previousPosition = { ...player.position };
      const previousRotation = { ...player.rotation };

      // 移動と回転の処理
      if (keys['up']) {
        player.position.x += Math.sin(player.rotation.y) * moveSpeed;
        player.position.z += Math.cos(player.rotation.y) * moveSpeed;
      }
      if (keys['down']) {
        player.position.x -= Math.sin(player.rotation.y) * moveSpeed;
        player.position.z -= Math.cos(player.rotation.y) * moveSpeed;
      }
      if (keys['left']) {
        player.rotation.y += rotateSpeed;
      }
      if (keys['right']) {
        player.rotation.y -= rotateSpeed;
      }

      // 壁との衝突判定
      let collision = false;
      gameState.obstacles.forEach(obs => {
        const dx = player.position.x - obs.position[0];
        const dz = player.position.z - obs.position[1];
        const distance = Math.sqrt(dx * dx + dz * dz);
        
        // 壁との距離が一定以下なら衝突
        if (distance < playerRadius + 0.5) {
          collision = true;
        }
      });

      // 外壁との衝突判定
      const boundarySize = 8;
      if (Math.abs(player.position.x) > boundarySize - playerRadius || 
          Math.abs(player.position.z) > boundarySize - playerRadius) {
        collision = true;
      }

      // 衝突した場合は前回の位置に戻す
      if (collision) {
        player.position = previousPosition;
        player.rotation = previousRotation;
      }

      // カメラの位置と回転を更新
      camera.position.set(
        player.position.x,
        player.position.y + 1.6,
        player.position.z
      );
      camera.rotation.y = player.rotation.y;

      // サーバーに位置を送信
      if (ws && ws.readyState === WebSocket.OPEN) {
        const message = {
          type: 'move',
          name: playerName,
          position: [player.position.x, player.position.z],
          rotation: player.rotation.y
        };
        ws.send(JSON.stringify(message));
      }
    }

    // 鍵の取得判定
    function checkKeyCollection() {
      const keyRadius = 0.5; // 鍵の取得範囲
      gameState.keys.forEach(key => {
        if (!key.found) {
          const dx = player.position.x - key.position[0];
          const dz = player.position.z - key.position[1];
          const distance = Math.sqrt(dx * dx + dz * dz);
          
          if (distance < keyRadius) {
            // サーバーに鍵取得を通知
            if (ws && ws.readyState === WebSocket.OPEN) {
              ws.send(JSON.stringify({
                type: 'collect_key',
                key_id: key.id,
                name: playerName
              }));
            }
          }
        }
      });
    }

    // 脱出判定
    function checkEscape() {
      if (gameState && gameState.game_state && playerRole === 'survivor') {
        const player = gameState.players[playerName];
        
        if (player) {
          if (player.keys_collected >= gameState.game_state.total_keys) {
            const dx = player.position[0] - gameState.escape_point[0];
            const dz = player.position[1] - gameState.escape_point[1];
            const distance = Math.sqrt(dx * dx + dz * dz);
            
            if (distance < 1.0) {
              if (ws && ws.readyState === WebSocket.OPEN) {
                const message = {
                  type: 'escape',
                  name: playerName,
                  position: player.position
                };
                ws.send(JSON.stringify(message));
              }
            }
          }
        }
      }
    }

    // アニメーションループ
    let animationId;
    function animate() {
      animationId = requestAnimationFrame(animate);
      updatePlayerPosition();
      checkKeyCollection();
      checkEscape();
      renderer.render(scene, camera);
    }

    // プレイヤー登録
    function registerPlayer() {
      playerName = document.getElementById('player-name').value;
      playerRole = document.getElementById('player-role').value;
      playerAvatar = document.getElementById('player-avatar').value;
      
      if (ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
          type: 'register',
          name: playerName,
          role: playerRole,
          avatar: playerAvatar
        }));
      } else {
        alert('WebSocket接続が確立されていません。ページを再読み込みしてください。');
      }
    }

    // ゲーム状態の更新
    function updateGameState() {
      const statusDiv = document.getElementById('status');
      const restartButton = document.getElementById('restart-button');
      
      if (gameState && gameState.game_state) {
        let playersInfo = '';
        if (gameState.players) {
          const hunters = Object.entries(gameState.players).filter(([name, data]) => data.role === 'hunter');
          const survivors = Object.entries(gameState.players).filter(([name, data]) => data.role === 'survivor');
          
          playersInfo += '<h4>プレイヤー</h4>';
          
          if (hunters.length > 0) {
            playersInfo += '<p style="color: #ff6666;">ハンター:</p>';
            hunters.forEach(([name, data]) => {
              const status = data.caught ? ' (捕獲済み)' : data.escaped ? ' (脱出済み)' : '';
              playersInfo += `<span style="margin-left: 10px;">• ${name} (${data.avatar})${status}</span><br>`;
            });
          }
          
          if (survivors.length > 0) {
            playersInfo += '<p style="color: #66ff66;">サバイバー:</p>';
            survivors.forEach(([name, data]) => {
              const status = data.caught ? ' (捕まった)' : data.escaped ? ' (脱出済み)' : '';
              const keys = data.keys_collected ? ` [鍵: ${data.keys_collected}]` : '';
              playersInfo += `<span style="margin-left: 10px;">• ${name} (${data.avatar})${keys}${status}</span><br>`;
            });
          }
        }
        
        statusDiv.innerHTML = `
          <h3>Game Status</h3>
          <p>Keys Found: ${gameState.game_state.keys_found}/${gameState.game_state.total_keys}</p>
          <p>Time Remaining: ${Math.floor(gameState.game_state.time_remaining / 60)}:${(gameState.game_state.time_remaining % 60).toString().padStart(2, '0')}</p>
          ${playersInfo}
        `;

        // ゲームが開始されている場合、restartボタンを表示
        if (gameState.game_state.game_started) {
          restartButton.style.display = 'block';
        }
      }
    }

    // ゲームの再開
    function restartGame() {
      if (ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
          type: 'reset'
        }));
        
        // アニメーションを停止
        if (animationId) {
          cancelAnimationFrame(animationId);
          animationId = null;
        }

        // Three.jsの要素を完全にクリア
        if (renderer) {
          renderer.dispose();
          document.getElementById('game-container').removeChild(renderer.domElement);
        }
        if (scene) {
          while(scene.children.length > 0) { 
            scene.remove(scene.children[0]); 
          }
        }
        scene = null;
        camera = null;
        renderer = null;
        
        // ログインフォームを表示
        document.getElementById('login-form').classList.remove('hidden');
        
        // ステータス表示をクリア
        document.getElementById('status').innerHTML = '';
        
        // restartボタンを非表示
        document.getElementById('restart-button').style.display = 'none';
        
        // プレイヤー情報をリセット
        playerName = '';
        playerRole = '';
        playerAvatar = '';
        
        // 入力フォームをクリア
        document.getElementById('player-name').value = '';
        document.getElementById('player-role').value = 'hunter';
        document.getElementById('player-avatar').value = 'ghost';

        // プレイヤーの位置をリセット
        player.position = { x: 0.5, y: 0, z: 0.5 };
        player.rotation = { y: 0 };
        
        // プレイヤーアバターをクリア
        playerAvatars = {};
      }
    }

    // WebSocketの設定
    function setupWebSocket() {
      ws = new WebSocket('ws://' + window.location.host + '/websocket');
      
      ws.onopen = function() {
        // WebSocket接続が確立されました
      };
      
      ws.onmessage = function(event) {
        const data = JSON.parse(event.data);
        
        switch(data.type) {
          case 'register_success':
            document.getElementById('login-form').classList.add('hidden');
            initThreeJS();
            generateMaze();
            // プレイヤーの位置とカメラを初期化
            player.position = { x: 0.5, y: 0, z: 0.5 };
            player.rotation = { y: 0 };
            camera.position.set(player.position.x, player.position.y + 1.6, player.position.z);
            camera.rotation.y = player.rotation.y;
            animate();
            break;
          case 'register_failed':
            alert(data.message);
            break;
          case 'game_state':
            // プレイヤーの位置情報を更新
            if (data.state.players && data.state.players[playerName]) {
              const serverPlayer = data.state.players[playerName];
              if (serverPlayer.position) {
                player.position.x = serverPlayer.position[0];
                player.position.z = serverPlayer.position[1];
                player.rotation.y = serverPlayer.rotation;
              }
            }
            
            // 鍵の状態を更新
            if (gameState && gameState.keys) {
              data.state.keys.forEach(newKey => {
                const existingKey = gameState.keys.find(k => k.id === newKey.id);
                if (existingKey && !existingKey.found && newKey.found) {
                  // 取得された鍵を非表示にする
                  scene.children.forEach(child => {
                    if (child.userData.keyId === newKey.id) {
                      scene.remove(child);
                    }
                  });
                }
              });
            }

            // マップの状態が変わった場合（リセット後など）、迷路を再生成
            if (!gameState || 
                JSON.stringify(gameState.obstacles) !== JSON.stringify(data.state.obstacles) ||
                JSON.stringify(gameState.escape_point) !== JSON.stringify(data.state.escape_point)) {
              // シーンをクリア（安全に）
              if (scene && scene.children) {
                const children = [...scene.children];
                children.forEach(child => {
                  if (child !== camera) {
                    scene.remove(child);
                  }
                });
              }

              // 光源の再設定
              const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
              scene.add(ambientLight);

              const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
              directionalLight.position.set(10, 20, 10);
              directionalLight.castShadow = true;
              directionalLight.shadow.mapSize.width = 2048;
              directionalLight.shadow.mapSize.height = 2048;
              directionalLight.shadow.camera.near = 0.5;
              directionalLight.shadow.camera.far = 50;
              scene.add(directionalLight);

              // 迷路を再生成
              gameState = data.state;
              generateMaze();
            } else {
              gameState = data.state;
            }

            // プレイヤーアバターを更新
            updatePlayerAvatars();

            updateGameState();

            // 脱出可能な場合、メッセージを表示
            if (gameState.game_state.keys_found >= gameState.game_state.total_keys) {
              const statusDiv = document.getElementById('status');
              statusDiv.innerHTML += '<p style="color: green;">脱出可能！出口に向かってください。</p>';
            }

            // ゲーム終了状態の確認
            if (gameState.game_state.game_over) {
              const statusDiv = document.getElementById('status');
              if (gameState.game_state.winner === 'survivors') {
                statusDiv.innerHTML = '<h2 style="color: green;">脱出成功！</h2>';
                // 脱出成功時のエフェクト
                const successGeometry = new THREE.SphereGeometry(5, 32, 32);
                const successMaterial = new THREE.MeshPhongMaterial({
                  color: 0x00ff00,
                  transparent: true,
                  opacity: 0.5
                });
                const successSphere = new THREE.Mesh(successGeometry, successMaterial);
                successSphere.position.set(0, 0, 0);
                scene.add(successSphere);

                // アニメーションを停止
                cancelAnimationFrame(animationId);
              } else {
                statusDiv.innerHTML = '<h2 style="color: red;">ゲームオーバー</h2>';
              }
            }
            break;
          case 'player_joined':
            console.log('新しいプレイヤーが参加しました:', data.name);
            break;
          case 'player_left':
            console.log('プレイヤーが退出しました:', data.name);
            break;
          case 'game_over':
            console.log('ゲーム終了:', data.message);
            const statusDiv = document.getElementById('status');
            statusDiv.innerHTML = `<h2 style="color: ${data.winner === 'survivors' ? 'green' : 'red'}">${data.message}</h2>`;
            break;
        }
      };
      
      ws.onclose = function() {
        console.log('WebSocket接続が切断されました');
      };
    }

    // ページ読み込み時の初期化
    window.onload = function() {
      // シーンの初期化
      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.shadowMap.enabled = true;
      document.body.appendChild(renderer.domElement);

      // カメラの初期位置設定
      camera.position.set(0, 5, 10);
      camera.lookAt(0, 0, 0);

      setupWebSocket();
    };

    // ウィンドウリサイズ時の処理
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });

    // プレイヤーアバターの作成
    function createPlayerAvatar(avatarType, role) {
      const avatarGroup = new THREE.Group();
      
      // 基本的な体の形状
      const bodyGeometry = new THREE.CylinderGeometry(0.2, 0.2, 1.2, 8);
      let bodyMaterial;
      
      // ロールとアバタータイプに応じて色を設定
      if (role === 'hunter') {
        switch(avatarType) {
          case 'ghost':
            bodyMaterial = new THREE.MeshPhongMaterial({ 
              color: 0xffffff, 
              transparent: true, 
              opacity: 0.7 
            });
            break;
          case 'zombie':
            bodyMaterial = new THREE.MeshPhongMaterial({ color: 0x228B22 });
            break;
          case 'vampire':
            bodyMaterial = new THREE.MeshPhongMaterial({ color: 0x8B0000 });
            break;
          default:
            bodyMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000 });
        }
      } else {
        switch(avatarType) {
          case 'person':
            bodyMaterial = new THREE.MeshPhongMaterial({ color: 0x0000ff });
            break;
          case 'man':
            bodyMaterial = new THREE.MeshPhongMaterial({ color: 0x4169E1 });
            break;
          case 'woman':
            bodyMaterial = new THREE.MeshPhongMaterial({ color: 0xFF69B4 });
            break;
          default:
            bodyMaterial = new THREE.MeshPhongMaterial({ color: 0x0000ff });
        }
      }
      
      const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
      body.position.y = 0.6;
      body.castShadow = true;
      avatarGroup.add(body);
      
      // 頭部
      const headGeometry = new THREE.SphereGeometry(0.15, 16, 16);
      const headMaterial = new THREE.MeshPhongMaterial({ 
        color: role === 'hunter' ? 0xffcccc : 0xffddaa 
      });
      const head = new THREE.Mesh(headGeometry, headMaterial);
      head.position.y = 1.35;
      head.castShadow = true;
      avatarGroup.add(head);
      
      // 名前表示用のテキスト（簡易版として色付きの球体を頭上に配置）
      const nameIndicatorGeometry = new THREE.SphereGeometry(0.05, 8, 8);
      const nameIndicatorMaterial = new THREE.MeshPhongMaterial({ 
        color: role === 'hunter' ? 0xff0000 : 0x00ff00,
        emissive: role === 'hunter' ? 0x440000 : 0x004400
      });
      const nameIndicator = new THREE.Mesh(nameIndicatorGeometry, nameIndicatorMaterial);
      nameIndicator.position.y = 1.7;
      avatarGroup.add(nameIndicator);
      
      return avatarGroup;
    }

    // プレイヤーアバターの更新
    function updatePlayerAvatars() {
      if (!gameState.players) return;
      
      // 現在のプレイヤーリストを取得
      const currentPlayers = Object.keys(gameState.players);
      
      // 削除されたプレイヤーのアバターを削除
      Object.keys(playerAvatars).forEach(avatarPlayerName => {
        if (!currentPlayers.includes(avatarPlayerName)) {
          scene.remove(playerAvatars[avatarPlayerName]);
          delete playerAvatars[avatarPlayerName];
        }
      });
      
      // 各プレイヤーのアバターを更新
      Object.entries(gameState.players).forEach(([name, playerData]) => {
        // 自分自身のアバターは表示しない
        if (name === playerName) return;
        
        // 新しいプレイヤーのアバターを作成
        if (!playerAvatars[name]) {
          console.log(`Creating avatar for player: ${name} (${playerData.role}, ${playerData.avatar})`);
          playerAvatars[name] = createPlayerAvatar(playerData.avatar, playerData.role);
          scene.add(playerAvatars[name]);
        }
        
        // アバターの位置を更新
        if (playerData.position) {
          playerAvatars[name].position.set(
            playerData.position[0],
            0,
            playerData.position[1]
          );
          playerAvatars[name].rotation.y = playerData.rotation || 0;
        }
        
        // 捕まったプレイヤーや脱出したプレイヤーの表示を変更
        if (playerData.caught) {
          playerAvatars[name].visible = false;
        } else if (playerData.escaped) {
          // 脱出したプレイヤーは緑色に光らせる
          playerAvatars[name].children.forEach(child => {
            if (child.material) {
              child.material.emissive = new THREE.Color(0x004400);
            }
          });
        } else {
          playerAvatars[name].visible = true;
        }
      });
    }

    // 迷路の生成
    function generateMaze() {
      const wallGeometry = new THREE.BoxGeometry(1, 4, 1);
      
      // 壁のテクスチャを作成（レンガ模様）
      const wallCanvas = document.createElement('canvas');
      wallCanvas.width = 256;
      wallCanvas.height = 256;
      const wallCtx = wallCanvas.getContext('2d');
      
      // レンガの背景色
      wallCtx.fillStyle = '#8B4513';
      wallCtx.fillRect(0, 0, 256, 256);
      
      // レンガのパターンを描画
      wallCtx.fillStyle = '#A0522D';
      wallCtx.strokeStyle = '#654321';
      wallCtx.lineWidth = 2;
      
      const brickWidth = 64;
      const brickHeight = 32;
      
      for (let y = 0; y < 256; y += brickHeight) {
        for (let x = 0; x < 256; x += brickWidth) {
          const offsetX = (Math.floor(y / brickHeight) % 2) * (brickWidth / 2);
          const brickX = (x + offsetX) % 256;
          
          wallCtx.fillRect(brickX, y, brickWidth - 2, brickHeight - 2);
          wallCtx.strokeRect(brickX, y, brickWidth - 2, brickHeight - 2);
        }
      }
      
      const wallTexture = new THREE.CanvasTexture(wallCanvas);
      wallTexture.wrapS = THREE.RepeatWrapping;
      wallTexture.wrapT = THREE.RepeatWrapping;
      wallTexture.repeat.set(1, 2);
      
      const wallMaterial = new THREE.MeshPhongMaterial({ 
        map: wallTexture,
        shininess: 10
      });
      
      const floorGeometry = new THREE.PlaneGeometry(100, 100);
      
      // 床のテクスチャを作成（石畳模様）
      const floorCanvas = document.createElement('canvas');
      floorCanvas.width = 256;
      floorCanvas.height = 256;
      const floorCtx = floorCanvas.getContext('2d');
      
      // 石畳の背景色
      floorCtx.fillStyle = '#696969';
      floorCtx.fillRect(0, 0, 256, 256);
      
      // 石畳のパターンを描画
      floorCtx.strokeStyle = '#2F4F4F';
      floorCtx.lineWidth = 3;
      
      const stoneSize = 32;
      
      for (let y = 0; y < 256; y += stoneSize) {
        for (let x = 0; x < 256; x += stoneSize) {
          // 各石に少し異なる色を付ける
          const variation = Math.random() * 0.3 - 0.15;
          const gray = Math.floor(105 + variation * 50);
          floorCtx.fillStyle = `rgb(${gray}, ${gray}, ${gray})`;
          floorCtx.fillRect(x + 1, y + 1, stoneSize - 2, stoneSize - 2);
          floorCtx.strokeRect(x, y, stoneSize, stoneSize);
        }
      }
      
      const floorTexture = new THREE.CanvasTexture(floorCanvas);
      floorTexture.wrapS = THREE.RepeatWrapping;
      floorTexture.wrapT = THREE.RepeatWrapping;
      floorTexture.repeat.set(20, 20);
      
      const floorMaterial = new THREE.MeshPhongMaterial({ 
        map: floorTexture,
        shininess: 5
      });

      // 床の追加
      const floor = new THREE.Mesh(floorGeometry, floorMaterial);
      floor.rotation.x = -Math.PI / 2;
      floor.position.y = -1;
      floor.receiveShadow = true;
      scene.add(floor);

      // 壁の追加
      gameState.obstacles.forEach(obs => {
        const wall = new THREE.Mesh(wallGeometry, wallMaterial);
        wall.position.set(obs.position[0], 1, obs.position[1]);
        wall.castShadow = true;
        wall.receiveShadow = true;
        scene.add(wall);
      });

      // 脱出地点の追加
      const escapeGeometry = new THREE.BoxGeometry(1, 0.1, 1);
      const escapeMaterial = new THREE.MeshPhongMaterial({ 
        color: 0x00ffff,  // より目立つ水色に変更
        shininess: 100,
        transparent: true,
        opacity: 0.7
      });
      const escape = new THREE.Mesh(escapeGeometry, escapeMaterial);
      escape.position.set(gameState.escape_point[0], 0.05, gameState.escape_point[1]);
      scene.add(escape);

      // 脱出地点の光るエフェクト
      const glowGeometry = new THREE.SphereGeometry(1.5, 32, 32);
      const glowMaterial = new THREE.MeshPhongMaterial({
        color: 0x00ffff,
        transparent: true,
        opacity: 0.2,
        side: THREE.DoubleSide
      });
      const glow = new THREE.Mesh(glowGeometry, glowMaterial);
      glow.position.set(gameState.escape_point[0], 1, gameState.escape_point[1]);
      scene.add(glow);

      // 脱出地点の矢印
      const arrowGeometry = new THREE.ConeGeometry(0.3, 1, 32);
      const arrowMaterial = new THREE.MeshPhongMaterial({
        color: 0x00ffff,
        shininess: 100
      });
      const arrow = new THREE.Mesh(arrowGeometry, arrowMaterial);
      arrow.position.set(gameState.escape_point[0], 2, gameState.escape_point[1]);
      arrow.rotation.x = Math.PI;  // 下向きに
      scene.add(arrow);

      // 脱出地点の点滅アニメーション
      let time = 0;
      const animateEscape = () => {
        if (glow.parent) {
          time += 0.05;
          glow.material.opacity = 0.1 + Math.sin(time) * 0.1;
          glow.scale.set(1 + Math.sin(time) * 0.2, 1 + Math.sin(time) * 0.2, 1 + Math.sin(time) * 0.2);
          requestAnimationFrame(animateEscape);
        }
      };
      animateEscape();

      // 脱出地点の視覚的な目印を追加
      const markerGeometry = new THREE.CylinderGeometry(0.5, 0.5, 2, 32);
      const markerMaterial = new THREE.MeshPhongMaterial({
        color: 0x00ffff,
        transparent: true,
        opacity: 0.3
      });
      const marker = new THREE.Mesh(markerGeometry, markerMaterial);
      marker.position.set(gameState.escape_point[0], 1, gameState.escape_point[1]);
      scene.add(marker);

      // 鍵の追加（未取得のもののみ）
      gameState.keys.forEach(key => {
        if (!key.found) {
          // 鍵のグループを作成
          const keyGroup = new THREE.Group();
          keyGroup.position.set(key.position[0], 0.5, key.position[1]);

          // 鍵の頭部分（リング）
          const keyRingGeometry = new THREE.TorusGeometry(0.15, 0.03, 16, 32);
          const keyRingMaterial = new THREE.MeshPhongMaterial({ 
            color: 0xffd700,
            shininess: 100
          });
          const keyRing = new THREE.Mesh(keyRingGeometry, keyRingMaterial);
          // リングを垂直に配置
          keyRing.rotation.y = Math.PI / 2;
          keyGroup.add(keyRing);

          // 鍵の胴体部分
          const keyBodyGeometry = new THREE.CylinderGeometry(0.03, 0.03, 0.3, 16);
          const keyBodyMaterial = new THREE.MeshPhongMaterial({ 
            color: 0xffd700,
            shininess: 100
          });
          const keyBody = new THREE.Mesh(keyBodyGeometry, keyBodyMaterial);
          // 胴体をリングの外側に配置し、縦位置を揃える
          keyBody.position.set(0, -0.3, 0);
          keyGroup.add(keyBody);

          // 鍵の歯部分（2本）
          const keyTeethMaterial = new THREE.MeshPhongMaterial({ 
            color: 0xffd700,
            shininess: 100
          });

          // 1本目の歯
          const keyTeeth1Geometry = new THREE.BoxGeometry(0.15, 0.03, 0.03);
          const keyTeeth1 = new THREE.Mesh(keyTeeth1Geometry, keyTeethMaterial);
          keyTeeth1.position.set(0, -0.3, -0.04);
          // 歯部分をリングと平行に
          keyTeeth1.rotation.y = Math.PI / 2;
          keyGroup.add(keyTeeth1);

          // 2本目の歯
          const keyTeeth2Geometry = new THREE.BoxGeometry(0.15, 0.03, 0.03);
          const keyTeeth2 = new THREE.Mesh(keyTeeth2Geometry, keyTeethMaterial);
          keyTeeth2.position.set(0, -0.45, -0.04);
          // 歯部分をリングと平行に
          keyTeeth2.rotation.y = Math.PI / 2;
          keyGroup.add(keyTeeth2);

          // 影の設定
          keyGroup.traverse((object) => {
            if (object instanceof THREE.Mesh) {
              object.castShadow = true;
            }
          });

          // 鍵のIDを保存
          keyGroup.userData.keyId = key.id;

          // 浮遊アニメーション
          let time = 0;
          const animate = () => {
            if (keyGroup.parent) {
              time += 0.02;
              // 上下の浮遊
              keyGroup.position.y = 0.5 + Math.sin(time) * 0.1;
              // 回転
              keyGroup.rotation.y += 0.01;
              requestAnimationFrame(animate);
            }
          };
          animate();

          scene.add(keyGroup);
        }
      });

      // 迷路の境界を追加
      const boundaryGeometry = new THREE.BoxGeometry(1, 4, 1);

      // 外壁を追加（内壁と同じレンガテクスチャを使用）
      for (let x = -8; x <= 8; x++) {
        for (let z = -8; z <= 8; z++) {
          if (x === -8 || x === 8 || z === -8 || z === 8) {
            const wall = new THREE.Mesh(boundaryGeometry, wallMaterial);
            wall.position.set(x, 1, z);
            wall.castShadow = true;
            wall.receiveShadow = true;
            scene.add(wall);
          }
        }
      }

      // アニメーションループ
      function animate() {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
      }
      animate();

      // ゲームループ
      function gameLoop() {
        requestAnimationFrame(gameLoop);
        // プレイヤーの移動処理
        if (keys.ArrowUp) movePlayer('up');
        if (keys.ArrowDown) movePlayer('down');
        if (keys.ArrowLeft) movePlayer('left');
        if (keys.ArrowRight) movePlayer('right');
      }
      gameLoop();
    }
  </script>
</body>
</html>
