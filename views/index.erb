<!DOCTYPE html>
<html>
<head>
  <title>3D Maze Game</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <style>
    body {
      margin: 0;
      overflow: hidden;
    }
    #game-container {
      position: relative;
      width: 100vw;
      height: 100vh;
    }
    #ui-overlay {
      position: absolute;
      top: 20px;
      left: 20px;
      color: white;
      font-family: Arial, sans-serif;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
      z-index: 100;
    }
    #login-form {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: rgba(0, 0, 0, 0.8);
      padding: 20px;
      border-radius: 10px;
      color: white;
      z-index: 1000;
    }
    #login-form input,
    #login-form select,
    #login-form button {
      display: block;
      margin: 10px 0;
      padding: 8px;
      width: 200px;
    }
    #login-form button {
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    #login-form button:hover {
      background-color: #45a049;
    }
    .hidden {
      display: none;
    }
  </style>
</head>
<body>
  <div id="game-container">
    <div id="ui-overlay">
      <div id="status"></div>
    </div>
    <div id="login-form">
      <input type="text" id="player-name" placeholder="Enter your name">
      <select id="player-role">
        <option value="hunter">Hunter</option>
        <option value="survivor">Survivor</option>
      </select>
      <select id="player-avatar">
        <optgroup label="Hunter">
          <option value="ghost">Ghost</option>
          <option value="zombie">Zombie</option>
          <option value="vampire">Vampire</option>
        </optgroup>
        <optgroup label="Survivor">
          <option value="person">Person</option>
          <option value="man">Man</option>
          <option value="woman">Woman</option>
        </optgroup>
      </select>
      <button onclick="registerPlayer()">Join Game</button>
    </div>
  </div>

  <script>
    let ws;
    let playerName = '';
    let playerRole = '';
    let playerAvatar = '';
    let scene, camera, renderer;
    let maze = [];
    let player = {
      position: { x: 0.5, y: 0, z: 0.5 },
      rotation: { y: 0 },
      speed: 0.2,
      turnSpeed: 0.1
    };
    let keys = {};
    let gameState = {
      players: {},
      keys: [],
      obstacles: [],
      escape_point: [0, 0]
    };

    // キーボード制御
    document.addEventListener('keydown', function(e) {
      console.log('Key pressed:', e.key);
      switch(e.key) {
        case 'ArrowUp':
          keys['up'] = true;
          break;
        case 'ArrowDown':
          keys['down'] = true;
          break;
        case 'ArrowLeft':
          keys['left'] = true;
          break;
        case 'ArrowRight':
          keys['right'] = true;
          break;
      }
      console.log('Keys state after keydown:', keys);
    });

    document.addEventListener('keyup', function(e) {
      console.log('Key released:', e.key);
      switch(e.key) {
        case 'ArrowUp':
          keys['up'] = false;
          break;
        case 'ArrowDown':
          keys['down'] = false;
          break;
        case 'ArrowLeft':
          keys['left'] = false;
          break;
        case 'ArrowRight':
          keys['right'] = false;
          break;
      }
      console.log('Keys state after keyup:', keys);
    });

    // Three.jsの初期化
    function initThreeJS() {
      scene = new THREE.Scene();
      scene.background = new THREE.Color(0x87CEEB); // 空色の背景

      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.shadowMap.enabled = true;
      document.getElementById('game-container').appendChild(renderer.domElement);

      // 光源の追加
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
      scene.add(ambientLight);

      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
      directionalLight.position.set(10, 20, 10);
      directionalLight.castShadow = true;
      directionalLight.shadow.mapSize.width = 2048;
      directionalLight.shadow.mapSize.height = 2048;
      directionalLight.shadow.camera.near = 0.5;
      directionalLight.shadow.camera.far = 50;
      scene.add(directionalLight);

      // プレイヤーの初期位置を設定（中央から少しずらす）
      player.position = { x: 0.5, y: 0, z: 0.5 };
      player.rotation = { y: 0 };

      // カメラの初期位置
      camera.position.set(player.position.x, player.position.y + 1.6, player.position.z);
      camera.rotation.y = player.rotation.y;
    }

    // プレイヤーの移動
    function updatePlayerPosition() {
      console.log('Current keys state:', keys);
      console.log('Current player position:', player.position);
      console.log('Current player rotation:', player.rotation);
      
      // 移動の計算
      if (keys['up']) {
        player.position.x += Math.sin(player.rotation.y) * player.speed;
        player.position.z += Math.cos(player.rotation.y) * player.speed;
        console.log('Moving forward');
      }
      if (keys['down']) {
        player.position.x -= Math.sin(player.rotation.y) * player.speed;
        player.position.z -= Math.cos(player.rotation.y) * player.speed;
        console.log('Moving backward');
      }
      if (keys['left']) {
        player.rotation.y += player.turnSpeed;
        console.log('Turning left');
      }
      if (keys['right']) {
        player.rotation.y -= player.turnSpeed;
        console.log('Turning right');
      }

      // カメラの位置と回転を更新
      camera.position.set(player.position.x, player.position.y + 1.6, player.position.z);
      camera.rotation.y = player.rotation.y;

      // サーバーに位置を送信
      if (ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
          type: 'move',
          name: playerName,
          position: [player.position.x, player.position.z],
          rotation: player.rotation.y
        }));
      }
    }

    // アニメーションループ
    function animate() {
      requestAnimationFrame(animate);
      updatePlayerPosition();
      renderer.render(scene, camera);
    }

    // WebSocket接続
    function connect() {
      ws = new WebSocket('ws://' + window.location.host + '/websocket');
      
      ws.onmessage = function(event) {
        const data = JSON.parse(event.data);
        console.log('Received WebSocket message:', data);
        switch(data.type) {
          case 'register_success':
            document.getElementById('login-form').classList.add('hidden');
            playerName = document.getElementById('player-name').value;
            playerRole = document.getElementById('player-role').value;
            playerAvatar = document.getElementById('player-avatar').value;
            console.log('Player registered:', { playerName, playerRole, playerAvatar });
            initThreeJS();
            generateMaze();
            animate();
            break;
          case 'register_failed':
            alert(data.message);
            break;
          case 'game_state':
            gameState = data.state;
            updateGameState();
            break;
        }
      };

      ws.onopen = function() {
        console.log('WebSocket connection established');
      };

      ws.onerror = function(error) {
        console.error('WebSocket error:', error);
      };

      ws.onclose = function() {
        console.log('WebSocket connection closed');
      };
    }

    function registerPlayer() {
      const name = document.getElementById('player-name').value;
      const role = document.getElementById('player-role').value;
      const avatar = document.getElementById('player-avatar').value;
      if (name && role) {
        ws.send(JSON.stringify({
          type: 'register',
          name: name,
          role: role,
          avatar: avatar
        }));
      }
    }

    function updateGameState() {
      // ゲーム状態の更新処理
      const statusDiv = document.getElementById('status');
      statusDiv.innerHTML = `
        <h3>Game Status</h3>
        <p>Keys Found: ${gameState.game_state.keys_found}/${gameState.game_state.total_keys}</p>
        <p>Time Remaining: ${Math.floor(gameState.game_state.time_remaining / 60)}:${(gameState.game_state.time_remaining % 60).toString().padStart(2, '0')}</p>
      `;
    }

    // ページ読み込み時にWebSocket接続を開始
    window.onload = function() {
      connect();
    };

    // ウィンドウリサイズ時の処理
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });

    // 迷路の生成
    function generateMaze() {
      const wallGeometry = new THREE.BoxGeometry(1, 4, 1); // 壁の高さを4に増やす
      const wallMaterial = new THREE.MeshPhongMaterial({ 
        color: 0x808080,
        shininess: 30
      });
      const floorGeometry = new THREE.PlaneGeometry(100, 100);
      const floorMaterial = new THREE.MeshPhongMaterial({ 
        color: 0x404040,
        shininess: 30
      });

      // 床の追加
      const floor = new THREE.Mesh(floorGeometry, floorMaterial);
      floor.rotation.x = -Math.PI / 2;
      floor.position.y = -1;
      floor.receiveShadow = true;
      scene.add(floor);

      // 壁の追加
      gameState.obstacles.forEach(obs => {
        const wall = new THREE.Mesh(wallGeometry, wallMaterial);
        wall.position.set(obs.position[0], 1, obs.position[1]); // y座標を1に設定して、床から少し浮かせる
        wall.castShadow = true;
        wall.receiveShadow = true;
        scene.add(wall);
      });

      // 脱出地点の追加
      const escapeGeometry = new THREE.BoxGeometry(1, 0.1, 1);
      const escapeMaterial = new THREE.MeshPhongMaterial({ 
        color: 0x0000ff,
        shininess: 30
      });
      const escape = new THREE.Mesh(escapeGeometry, escapeMaterial);
      escape.position.set(gameState.escape_point[0], -0.95, gameState.escape_point[1]);
      scene.add(escape);

      // 鍵の追加
      gameState.keys.forEach(key => {
        if (!key.found) {
          const keyGeometry = new THREE.BoxGeometry(0.3, 0.3, 0.3);
          const keyMaterial = new THREE.MeshPhongMaterial({ 
            color: 0xffd700,
            shininess: 100
          });
          const keyMesh = new THREE.Mesh(keyGeometry, keyMaterial);
          keyMesh.position.set(key.position[0], 0.5, key.position[1]);
          keyMesh.castShadow = true;
          scene.add(keyMesh);
        }
      });

      // 迷路の境界を追加
      const boundaryGeometry = new THREE.BoxGeometry(1, 4, 1); // 境界の壁も高さ4に
      const boundaryMaterial = new THREE.MeshPhongMaterial({ 
        color: 0x404040,
        shininess: 30
      });

      // 外壁を追加
      for (let x = -8; x <= 8; x++) {
        for (let z = -8; z <= 8; z++) {
          if (x === -8 || x === 8 || z === -8 || z === 8) {
            const wall = new THREE.Mesh(boundaryGeometry, boundaryMaterial);
            wall.position.set(x, 1, z); // y座標を1に設定
            wall.castShadow = true;
            wall.receiveShadow = true;
            scene.add(wall);
          }
        }
      }
    }
  </script>
</body>
</html> 