<!DOCTYPE html>
<html>
<head>
  <title>3D Maze Game</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <style>
    body {
      margin: 0;
      overflow: hidden;
    }
    #game-container {
      position: relative;
      width: 100vw;
      height: 100vh;
    }
    #ui-overlay {
      position: absolute;
      top: 20px;
      left: 20px;
      color: white;
      font-family: Arial, sans-serif;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
      z-index: 100;
    }
    #login-form {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: rgba(0, 0, 0, 0.8);
      padding: 20px;
      border-radius: 10px;
      color: white;
      z-index: 1000;
    }
    #login-form input,
    #login-form select,
    #login-form button {
      display: block;
      margin: 10px 0;
      padding: 8px;
      width: 200px;
    }
    #login-form button {
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    #login-form button:hover {
      background-color: #45a049;
    }
    .hidden {
      display: none;
    }
    #restart-button {
      position: absolute;
      top: 20px;
      right: 20px;
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      display: none;
      z-index: 100;
    }
    #restart-button:hover {
      background-color: #45a049;
    }
  </style>
</head>
<body>
  <div id="game-container">
    <div id="ui-overlay">
      <div id="status"></div>
    </div>
    <button id="restart-button" onclick="restartGame()">Restart Game</button>
    <div id="login-form">
      <input type="text" id="player-name" placeholder="Enter your name">
      <select id="player-role">
        <option value="hunter">Hunter</option>
        <option value="survivor">Survivor</option>
      </select>
      <select id="player-avatar">
        <optgroup label="Hunter">
          <option value="ghost">Ghost</option>
          <option value="zombie">Zombie</option>
          <option value="vampire">Vampire</option>
        </optgroup>
        <optgroup label="Survivor">
          <option value="person">Person</option>
          <option value="man">Man</option>
          <option value="woman">Woman</option>
        </optgroup>
      </select>
      <button onclick="registerPlayer()">Join Game</button>
    </div>
  </div>

  <script>
    let ws;
    let playerName = '';
    let playerRole = '';
    let playerAvatar = '';
    let scene, camera, renderer;
    let maze = [];
    let player = {
      position: { x: 0.5, y: 0, z: 0.5 },
      rotation: { y: 0 },
      speed: 0.2,
      turnSpeed: 0.1
    };
    let keys = {};
    let gameState = {
      players: {},
      keys: [],
      obstacles: [],
      escape_point: [0, 0]
    };

    // キーボード制御
    document.addEventListener('keydown', function(e) {
      switch(e.key) {
        case 'ArrowUp':
          keys['up'] = true;
          break;
        case 'ArrowDown':
          keys['down'] = true;
          break;
        case 'ArrowLeft':
          keys['left'] = true;
          break;
        case 'ArrowRight':
          keys['right'] = true;
          break;
      }
    });

    document.addEventListener('keyup', function(e) {
      switch(e.key) {
        case 'ArrowUp':
          keys['up'] = false;
          break;
        case 'ArrowDown':
          keys['down'] = false;
          break;
        case 'ArrowLeft':
          keys['left'] = false;
          break;
        case 'ArrowRight':
          keys['right'] = false;
          break;
      }
    });

    // Three.jsの初期化
    function initThreeJS() {
      scene = new THREE.Scene();
      scene.background = new THREE.Color(0x87CEEB); // 空色の背景

      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.shadowMap.enabled = true;
      document.getElementById('game-container').appendChild(renderer.domElement);

      // 光源の追加
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
      scene.add(ambientLight);

      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
      directionalLight.position.set(10, 20, 10);
      directionalLight.castShadow = true;
      directionalLight.shadow.mapSize.width = 2048;
      directionalLight.shadow.mapSize.height = 2048;
      directionalLight.shadow.camera.near = 0.5;
      directionalLight.shadow.camera.far = 50;
      scene.add(directionalLight);

      // プレイヤーの初期位置を設定（中央から少しずらす）
      player.position = { x: 0.5, y: 0, z: 0.5 };
      player.rotation = { y: 0 };

      // カメラの初期位置
      camera.position.set(player.position.x, player.position.y + 1.6, player.position.z);
      camera.rotation.y = player.rotation.y;
    }

    // プレイヤーの移動を更新
    function updatePlayerPosition() {
      const moveSpeed = 0.1;
      const rotateSpeed = 0.05;
      const playerRadius = 0.2; // プレイヤーの半径

      // 前回の位置を保存
      const previousPosition = { ...player.position };
      const previousRotation = { ...player.rotation };

      // 移動と回転の処理
      if (keys['up']) {
        player.position.x += Math.sin(player.rotation.y) * moveSpeed;
        player.position.z += Math.cos(player.rotation.y) * moveSpeed;
      }
      if (keys['down']) {
        player.position.x -= Math.sin(player.rotation.y) * moveSpeed;
        player.position.z -= Math.cos(player.rotation.y) * moveSpeed;
      }
      if (keys['left']) {
        player.rotation.y += rotateSpeed;
      }
      if (keys['right']) {
        player.rotation.y -= rotateSpeed;
      }

      // 壁との衝突判定
      let collision = false;
      gameState.obstacles.forEach(obs => {
        const dx = player.position.x - obs.position[0];
        const dz = player.position.z - obs.position[1];
        const distance = Math.sqrt(dx * dx + dz * dz);
        
        // 壁との距離が一定以下なら衝突
        if (distance < playerRadius + 0.5) {
          collision = true;
        }
      });

      // 外壁との衝突判定
      const boundarySize = 8;
      if (Math.abs(player.position.x) > boundarySize - playerRadius || 
          Math.abs(player.position.z) > boundarySize - playerRadius) {
        collision = true;
      }

      // 衝突した場合は前回の位置に戻す
      if (collision) {
        player.position = previousPosition;
        player.rotation = previousRotation;
      }

      // カメラの位置と回転を更新
      camera.position.set(
        player.position.x,
        player.position.y + 1.6,
        player.position.z
      );
      camera.rotation.y = player.rotation.y;

      // サーバーに位置を送信
      if (ws && ws.readyState === WebSocket.OPEN) {
        const message = {
          type: 'move',
          name: playerName,
          position: [player.position.x, player.position.z],
          rotation: player.rotation.y
        };
        ws.send(JSON.stringify(message));
      }
    }

    // 鍵の取得判定
    function checkKeyCollection() {
      const keyRadius = 0.5; // 鍵の取得範囲
      gameState.keys.forEach(key => {
        if (!key.found) {
          const dx = player.position.x - key.position[0];
          const dz = player.position.z - key.position[1];
          const distance = Math.sqrt(dx * dx + dz * dz);
          
          if (distance < keyRadius) {
            // サーバーに鍵取得を通知
            if (ws && ws.readyState === WebSocket.OPEN) {
              ws.send(JSON.stringify({
                type: 'collect_key',
                key_id: key.id,
                name: playerName
              }));
            }
          }
        }
      });
    }

    // 脱出判定
    function checkEscape() {
      if (gameState && gameState.game_state && playerRole === 'survivor') {
        const player = gameState.players[playerName];
        
        if (player) {
          if (player.keys_collected >= gameState.game_state.total_keys) {
            const dx = player.position[0] - gameState.escape_point[0];
            const dz = player.position[1] - gameState.escape_point[1];
            const distance = Math.sqrt(dx * dx + dz * dz);
            
            if (distance < 1.0) {
              if (ws && ws.readyState === WebSocket.OPEN) {
                const message = {
                  type: 'escape',
                  name: playerName,
                  position: player.position
                };
                ws.send(JSON.stringify(message));
              }
            }
          }
        }
      }
    }

    // アニメーションループ
    let animationId;
    function animate() {
      animationId = requestAnimationFrame(animate);
      updatePlayerPosition();
      checkKeyCollection();
      checkEscape();
      renderer.render(scene, camera);
    }

    // プレイヤー登録
    function registerPlayer() {
      playerName = document.getElementById('player-name').value;
      playerRole = document.getElementById('player-role').value;
      playerAvatar = document.getElementById('player-avatar').value;
      
      if (ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
          type: 'register',
          name: playerName,
          role: playerRole,
          avatar: playerAvatar
        }));
      } else {
        alert('WebSocket接続が確立されていません。ページを再読み込みしてください。');
      }
    }

    // ゲーム状態の更新
    function updateGameState() {
      const statusDiv = document.getElementById('status');
      const restartButton = document.getElementById('restart-button');
      
      if (gameState && gameState.game_state) {
        statusDiv.innerHTML = `
          <h3>Game Status</h3>
          <p>Keys Found: ${gameState.game_state.keys_found}/${gameState.game_state.total_keys}</p>
          <p>Time Remaining: ${Math.floor(gameState.game_state.time_remaining / 60)}:${(gameState.game_state.time_remaining % 60).toString().padStart(2, '0')}</p>
        `;

        // ゲームが開始されている場合、restartボタンを表示
        if (gameState.game_state.game_started) {
          restartButton.style.display = 'block';
        }
      }
    }

    // ゲームの再開
    function restartGame() {
      if (ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
          type: 'reset'
        }));
        
        // アニメーションを停止
        if (animationId) {
          cancelAnimationFrame(animationId);
          animationId = null;
        }

        // Three.jsの要素を完全にクリア
        if (renderer) {
          renderer.dispose();
          document.getElementById('game-container').removeChild(renderer.domElement);
        }
        if (scene) {
          while(scene.children.length > 0) { 
            scene.remove(scene.children[0]); 
          }
        }
        scene = null;
        camera = null;
        renderer = null;
        
        // ログインフォームを表示
        document.getElementById('login-form').classList.remove('hidden');
        
        // ステータス表示をクリア
        document.getElementById('status').innerHTML = '';
        
        // restartボタンを非表示
        document.getElementById('restart-button').style.display = 'none';
        
        // プレイヤー情報をリセット
        playerName = '';
        playerRole = '';
        playerAvatar = '';
        
        // 入力フォームをクリア
        document.getElementById('player-name').value = '';
        document.getElementById('player-role').value = 'hunter';
        document.getElementById('player-avatar').value = 'ghost';

        // プレイヤーの位置をリセット
        player.position = { x: 0.5, y: 0, z: 0.5 };
        player.rotation = { y: 0 };
      }
    }

    // WebSocketの設定
    function setupWebSocket() {
      ws = new WebSocket('ws://' + window.location.host + '/websocket');
      
      ws.onopen = function() {
        // WebSocket接続が確立されました
      };
      
      ws.onmessage = function(event) {
        const data = JSON.parse(event.data);
        
        switch(data.type) {
          case 'register_success':
            document.getElementById('login-form').classList.add('hidden');
            initThreeJS();
            generateMaze();
            // プレイヤーの位置とカメラを初期化
            player.position = { x: 0.5, y: 0, z: 0.5 };
            player.rotation = { y: 0 };
            camera.position.set(player.position.x, player.position.y + 1.6, player.position.z);
            camera.rotation.y = player.rotation.y;
            animate();
            break;
          case 'register_failed':
            alert(data.message);
            break;
          case 'game_state':
            // プレイヤーの位置情報を更新
            if (data.state.players && data.state.players[playerName]) {
              const serverPlayer = data.state.players[playerName];
              if (serverPlayer.position) {
                player.position.x = serverPlayer.position[0];
                player.position.z = serverPlayer.position[1];
                player.rotation.y = serverPlayer.rotation;
              }
            }
            
            // 鍵の状態を更新
            if (gameState && gameState.keys) {
              data.state.keys.forEach(newKey => {
                const existingKey = gameState.keys.find(k => k.id === newKey.id);
                if (existingKey && !existingKey.found && newKey.found) {
                  // 取得された鍵を非表示にする
                  scene.children.forEach(child => {
                    if (child.userData.keyId === newKey.id) {
                      scene.remove(child);
                    }
                  });
                }
              });
            }

            // マップの状態が変わった場合（リセット後など）、迷路を再生成
            if (!gameState || 
                JSON.stringify(gameState.obstacles) !== JSON.stringify(data.state.obstacles) ||
                JSON.stringify(gameState.escape_point) !== JSON.stringify(data.state.escape_point)) {
              // シーンをクリア
              while(scene.children.length > 0) { 
                scene.remove(scene.children[0]); 
              }

              // 光源の再設定
              const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
              scene.add(ambientLight);

              const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
              directionalLight.position.set(10, 20, 10);
              directionalLight.castShadow = true;
              directionalLight.shadow.mapSize.width = 2048;
              directionalLight.shadow.mapSize.height = 2048;
              directionalLight.shadow.camera.near = 0.5;
              directionalLight.shadow.camera.far = 50;
              scene.add(directionalLight);

              // 迷路を再生成
              gameState = data.state;
              generateMaze();
            } else {
              gameState = data.state;
            }

            updateGameState();

            // 脱出可能な場合、メッセージを表示
            if (gameState.game_state.keys_found >= gameState.game_state.total_keys) {
              const statusDiv = document.getElementById('status');
              statusDiv.innerHTML += '<p style="color: green;">脱出可能！出口に向かってください。</p>';
            }

            // ゲーム終了状態の確認
            if (gameState.game_state.game_over) {
              const statusDiv = document.getElementById('status');
              if (gameState.game_state.winner === 'survivors') {
                statusDiv.innerHTML = '<h2 style="color: green;">脱出成功！</h2>';
                // 脱出成功時のエフェクト
                const successGeometry = new THREE.SphereGeometry(5, 32, 32);
                const successMaterial = new THREE.MeshPhongMaterial({
                  color: 0x00ff00,
                  transparent: true,
                  opacity: 0.5
                });
                const successSphere = new THREE.Mesh(successGeometry, successMaterial);
                successSphere.position.set(0, 0, 0);
                scene.add(successSphere);

                // アニメーションを停止
                cancelAnimationFrame(animationId);
              } else {
                statusDiv.innerHTML = '<h2 style="color: red;">ゲームオーバー</h2>';
              }
            }
            break;
          case 'player_joined':
            console.log('新しいプレイヤーが参加しました:', data.name);
            break;
          case 'player_left':
            console.log('プレイヤーが退出しました:', data.name);
            break;
          case 'game_over':
            console.log('ゲーム終了:', data.message);
            const statusDiv = document.getElementById('status');
            statusDiv.innerHTML = `<h2 style="color: ${data.winner === 'survivors' ? 'green' : 'red'}">${data.message}</h2>`;
            break;
        }
      };
      
      ws.onclose = function() {
        console.log('WebSocket接続が切断されました');
      };
    }

    // ページ読み込み時の初期化
    window.onload = function() {
      setupWebSocket();
    };

    // ウィンドウリサイズ時の処理
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });

    // 迷路の生成
    function generateMaze() {
      const wallGeometry = new THREE.BoxGeometry(1, 4, 1);
      const wallMaterial = new THREE.MeshPhongMaterial({ 
        color: 0x808080,
        shininess: 30
      });
      const floorGeometry = new THREE.PlaneGeometry(100, 100);
      const floorMaterial = new THREE.MeshPhongMaterial({ 
        color: 0x404040,
        shininess: 30
      });

      // 床の追加
      const floor = new THREE.Mesh(floorGeometry, floorMaterial);
      floor.rotation.x = -Math.PI / 2;
      floor.position.y = -1;
      floor.receiveShadow = true;
      scene.add(floor);

      // 壁の追加
      gameState.obstacles.forEach(obs => {
        const wall = new THREE.Mesh(wallGeometry, wallMaterial);
        wall.position.set(obs.position[0], 1, obs.position[1]);
        wall.castShadow = true;
        wall.receiveShadow = true;
        scene.add(wall);
      });

      // 脱出地点の追加
      const escapeGeometry = new THREE.BoxGeometry(1, 0.1, 1);
      const escapeMaterial = new THREE.MeshPhongMaterial({ 
        color: 0x0000ff,
        shininess: 30,
        transparent: true,
        opacity: 0.7
      });
      const escape = new THREE.Mesh(escapeGeometry, escapeMaterial);
      escape.position.set(gameState.escape_point[0], 0.05, gameState.escape_point[1]); // 床の上に配置
      scene.add(escape);

      // 脱出地点の視覚的な目印を追加
      const markerGeometry = new THREE.CylinderGeometry(0.5, 0.5, 2, 32);
      const markerMaterial = new THREE.MeshPhongMaterial({
        color: 0x0000ff,
        transparent: true,
        opacity: 0.3
      });
      const marker = new THREE.Mesh(markerGeometry, markerMaterial);
      marker.position.set(gameState.escape_point[0], 1, gameState.escape_point[1]);
      scene.add(marker);

      // 鍵の追加（未取得のもののみ）
      gameState.keys.forEach(key => {
        if (!key.found) {
          const keyGeometry = new THREE.BoxGeometry(0.3, 0.3, 0.3);
          const keyMaterial = new THREE.MeshPhongMaterial({ 
            color: 0xffd700,
            shininess: 100
          });
          const keyMesh = new THREE.Mesh(keyGeometry, keyMaterial);
          keyMesh.position.set(key.position[0], 0.5, key.position[1]);
          keyMesh.castShadow = true;
          keyMesh.userData.keyId = key.id; // 鍵のIDを保存
          scene.add(keyMesh);
        }
      });

      // 迷路の境界を追加
      const boundaryGeometry = new THREE.BoxGeometry(1, 4, 1);
      const boundaryMaterial = new THREE.MeshPhongMaterial({ 
        color: 0x404040,
        shininess: 30
      });

      // 外壁を追加
      for (let x = -8; x <= 8; x++) {
        for (let z = -8; z <= 8; z++) {
          if (x === -8 || x === 8 || z === -8 || z === 8) {
            const wall = new THREE.Mesh(boundaryGeometry, boundaryMaterial);
            wall.position.set(x, 1, z);
            wall.castShadow = true;
            wall.receiveShadow = true;
            scene.add(wall);
          }
        }
      }
    }
  </script>
</body>
</html> 