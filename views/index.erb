<!DOCTYPE html>
<html>
<head>
  <title>DRuby Cooperative Game</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
      background-color: #f0f0f0;
    }
    #game-container {
      max-width: 800px;
      margin: 0 auto;
      background-color: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    #game-map {
      display: grid;
      grid-template-columns: repeat(21, 30px);
      grid-template-rows: repeat(21, 30px);
      gap: 1px;
      background-color: #ddd;
      padding: 10px;
      margin: 20px 0;
    }
    .cell {
      width: 30px;
      height: 30px;
      background-color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      font-size: 20px;
    }
    .player {
      color: green;
    }
    .treasure {
      color: gold;
    }
    .obstacle {
      color: #666;
    }
    .special-item {
      color: #ff6b6b;
    }
    #controls {
      margin-top: 20px;
      text-align: center;
    }
    button {
      padding: 10px 20px;
      margin: 5px;
      font-size: 16px;
      cursor: pointer;
      border: none;
      border-radius: 5px;
      background-color: #4CAF50;
      color: white;
      transition: background-color 0.3s;
    }
    button:hover {
      background-color: #45a049;
    }
    #status {
      margin-top: 20px;
      padding: 10px;
      background-color: #f8f8f8;
      border-radius: 5px;
    }
    .player-status {
      margin: 10px 0;
      padding: 10px;
      background-color: #fff;
      border-radius: 5px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .player-status p {
      margin: 5px 0;
    }
    #login-form {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }
    #login-form input,
    #login-form select {
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    #login-form button {
      background-color: #2196F3;
    }
    #login-form button:hover {
      background-color: #1976D2;
    }
  </style>
</head>
<body>
  <div id="game-container">
    <h1>DRuby Cooperative Game</h1>
    <div id="login-form">
      <input type="text" id="player-name" placeholder="Enter your name">
      <select id="player-role">
        <option value="explorer">Explorer</option>
        <option value="engineer">Engineer</option>
      </select>
      <select id="player-avatar">
        <option value="üë®‚Äçüíª">üë®‚Äçüíª</option>
        <option value="üë©‚Äçüíª">üë©‚Äçüíª</option>
        <option value="üßô‚Äç‚ôÇÔ∏è">üßô‚Äç‚ôÇÔ∏è</option>
        <option value="üßô‚Äç‚ôÄÔ∏è">üßô‚Äç‚ôÄÔ∏è</option>
        <option value="ü¶∏‚Äç‚ôÇÔ∏è">ü¶∏‚Äç‚ôÇÔ∏è</option>
        <option value="ü¶∏‚Äç‚ôÄÔ∏è">ü¶∏‚Äç‚ôÄÔ∏è</option>
        <option value="üßú‚Äç‚ôÇÔ∏è">üßú‚Äç‚ôÇÔ∏è</option>
        <option value="üßú‚Äç‚ôÄÔ∏è">üßú‚Äç‚ôÄÔ∏è</option>
        <option value="üßö‚Äç‚ôÇÔ∏è">üßö‚Äç‚ôÇÔ∏è</option>
        <option value="üßö‚Äç‚ôÄÔ∏è">üßö‚Äç‚ôÄÔ∏è</option>
      </select>
      <button onclick="registerPlayer()">Join Game</button>
    </div>
    <div id="game-map"></div>
    <div id="controls" style="display: none;">
      <button onclick="move('up')">‚Üë</button><br>
      <button onclick="move('left')">‚Üê</button>
      <button onclick="move('right')">‚Üí</button><br>
      <button onclick="move('down')">‚Üì</button>
      <br><br>
      <button onclick="resetGame()" style="background-color: #ff4444; color: white;">Reset Game</button>
    </div>
    <div id="status"></div>
  </div>

  <script>
    let ws;
    let playerName = '';
    let playerRole = '';
    let playerAvatar = '';

    // „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÊôÇ„Å´WebSocketÊé•Á∂ö„ÇíÈñãÂßã
    window.onload = function() {
      connect();
    };

    function connect() {
      console.log('Attempting to connect to WebSocket...');
      ws = new WebSocket('ws://' + window.location.host + '/websocket');
      
      ws.onopen = function() {
        console.log('WebSocket connection established');
      };
      
      ws.onmessage = function(event) {
        console.log('Received message:', event.data);
        const data = JSON.parse(event.data);
        switch(data.type) {
          case 'register_success':
            console.log('Registration successful');
            document.getElementById('login-form').style.display = 'none';
            document.getElementById('controls').style.display = 'block';
            playerName = document.getElementById('player-name').value;
            playerRole = document.getElementById('player-role').value;
            playerAvatar = document.getElementById('player-avatar').value;
            break;
          case 'register_failed':
            console.log('Registration failed:', data.message);
            alert(data.message);
            break;
          case 'game_state':
            console.log('Updating game state:', data.state);
            updateGameState(data.state);
            break;
        }
      };

      ws.onerror = function(error) {
        console.error('WebSocket error:', error);
      };

      ws.onclose = function() {
        console.log('WebSocket connection closed');
      };
    }

    function registerPlayer() {
      const name = document.getElementById('player-name').value;
      const role = document.getElementById('player-role').value;
      const avatar = document.getElementById('player-avatar').value;
      if (name && role) {
        console.log('Sending registration request:', { name, role, avatar });
        ws.send(JSON.stringify({
          type: 'register',
          name: name,
          role: role,
          avatar: avatar
        }));
      }
    }

    function move(direction) {
      console.log('Sending move request:', { name: playerName, direction });
      ws.send(JSON.stringify({
        type: 'move',
        name: playerName,
        direction: direction
      }));
    }

    function resetGame() {
      if (confirm('Are you sure you want to reset the game? All players will be removed.')) {
        console.log('Sending reset request');
        ws.send(JSON.stringify({
          type: 'reset'
        }));
        // „É≠„Ç∞„Ç§„É≥„Éï„Ç©„Éº„É†„ÇíË°®Á§∫
        document.getElementById('login-form').style.display = 'block';
        document.getElementById('controls').style.display = 'none';
        playerName = '';
        playerRole = '';
        playerAvatar = '';
      }
    }

    function formatTime(seconds) {
      if (isNaN(seconds) || seconds < 0) {
        return '0:00';
      }
      const minutes = Math.floor(seconds / 60);
      const remainingSeconds = seconds % 60;
      return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
    }

    function updateGameState(state) {
      console.log('Updating game state with:', state);
      
      // „Éû„ÉÉ„Éó„ÅÆÊõ¥Êñ∞
      const map = document.getElementById('game-map');
      map.innerHTML = '';
      
      // „Éû„ÉÉ„Éó„ÅÆÁîüÊàê
      for (let y = 10; y >= -10; y--) {
        for (let x = -10; x <= 10; x++) {
          const cell = document.createElement('div');
          cell.className = 'cell';
          
          // „Éó„É¨„Ç§„É§„Éº„ÅÆË°®Á§∫
          let isPlayer = false;
          if (state.players) {
            for (const [name, player] of Object.entries(state.players)) {
              if (player.position[0] === x && player.position[1] === y) {
                cell.textContent = player.avatar || 'P';
                cell.classList.add('player');
                isPlayer = true;
                break;
              }
            }
          }
          
          // ÂÆù„ÅÆË°®Á§∫
          if (!isPlayer && state.treasures) {
            for (const treasure of state.treasures) {
              if (treasure.position[0] === x && treasure.position[1] === y && !treasure.found) {
                cell.textContent = 'üíé';
                cell.classList.add('treasure');
                break;
              }
            }
          }
          
          // ÈöúÂÆ≥Áâ©„ÅÆË°®Á§∫
          if (!isPlayer && state.obstacles) {
            for (const obstacle of state.obstacles) {
              if (obstacle.position[0] === x && obstacle.position[1] === y && !obstacle.cleared) {
                cell.textContent = obstacle.type === 'rock' ? 'ü™®' : obstacle.type === 'tree' ? 'üå≥' : 'üíß';
                cell.classList.add('obstacle');
                break;
              }
            }
          }

          // ÁâπÊÆä„Ç¢„Ç§„ÉÜ„É†„ÅÆË°®Á§∫
          if (!isPlayer && state.special_items) {
            for (const item of state.special_items) {
              if (item.position[0] === x && item.position[1] === y && !item.collected) {
                cell.textContent = item.type === 'speed_boost' ? '‚ö°' : 
                                 item.type === 'time_boost' ? '‚è∞' : 
                                 item.type === 'treasure_radar' ? 'üîç' : 'üí•';
                cell.classList.add('special-item');
                break;
              }
            }
          }
          
          map.appendChild(cell);
        }
      }
      
      // „Çπ„ÉÜ„Éº„Çø„Çπ„ÅÆÊõ¥Êñ∞
      const status = document.getElementById('status');
      const gameState = state.game_state || {};
      const isGameClear = gameState.treasures_found === gameState.total_treasures && 
                        gameState.obstacles_cleared === gameState.total_obstacles;
      const isGameOver = gameState.game_over;
      
      status.innerHTML = `
        <h3>Game Progress:</h3>
        <p>Time remaining: ${formatTime(gameState.time_remaining)}</p>
        <p>Treasures found: ${gameState.treasures_found || 0}/${gameState.total_treasures || 0}</p>
        <p>Obstacles cleared: ${gameState.obstacles_cleared || 0}/${gameState.total_obstacles || 0}</p>
        ${isGameClear ? '<h2 style="color: gold;">üéâ Game Clear! üéâ</h2>' : ''}
        ${isGameOver ? '<h2 style="color: red;">‚è∞ Game Over! Time is up! ‚è∞</h2>' : ''}
        <h3>Players:</h3>
        ${Object.entries(state.players || {}).map(([name, player]) => `
          <div class="player-status">
            <p>${player.avatar || 'P'} ${name} (${player.role})</p>
            <p>Position: [${player.position[0]}, ${player.position[1]}]</p>
            <p>Score: ${player.score || 0}</p>
            ${player.items && player.items.length > 0 ? `
              <p>Items: ${player.items.map(item => 
                item.type === 'speed_boost' ? '‚ö°' : 
                item.type === 'time_boost' ? '‚è∞' : 
                item.type === 'treasure_radar' ? 'üîç' : 'üí•'
              ).join(' ')}</p>
            ` : ''}
          </div>
        `).join('')}
      `;
    }
  </script>
</body>
</html> 