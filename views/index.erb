<!DOCTYPE html>
<html>
<head>
  <title>DRuby Asymmetric Game</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
      background-color: #f0f0f0;
    }
    #game-container {
      max-width: 800px;
      margin: 0 auto;
      background-color: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    #game-map {
      display: grid;
      grid-template-columns: repeat(17, 30px);
      grid-template-rows: repeat(17, 30px);
      gap: 1px;
      background-color: #ddd;
      padding: 10px;
      margin: 20px 0;
    }
    .cell {
      width: 30px;
      height: 30px;
      background-color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      font-size: 20px;
    }
    .hunter {
      color: red;
    }
    .survivor {
      color: green;
    }
    .key {
      color: gold;
    }
    .escape {
      color: blue;
    }
    #controls {
      margin-top: 20px;
      text-align: center;
    }
    button {
      padding: 10px 20px;
      margin: 5px;
      font-size: 16px;
      cursor: pointer;
      border: none;
      border-radius: 5px;
      background-color: #4CAF50;
      color: white;
      transition: background-color 0.3s;
    }
    button:hover {
      background-color: #45a049;
    }
    #status {
      margin-top: 20px;
      padding: 10px;
      background-color: #f8f8f8;
      border-radius: 5px;
    }
    .player-status {
      margin: 10px 0;
      padding: 10px;
      background-color: #fff;
      border-radius: 5px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .player-status p {
      margin: 5px 0;
    }
    #login-form {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }
    #login-form input,
    #login-form select {
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    #login-form button {
      background-color: #2196F3;
    }
    #login-form button:hover {
      background-color: #1976D2;
    }
    .game-over {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      z-index: 1000;
    }
  </style>
</head>
<body>
  <div id="game-container">
    <h1>DRuby Asymmetric Game</h1>
    <div id="login-form">
      <input type="text" id="player-name" placeholder="Enter your name">
      <select id="player-role">
        <option value="hunter">Hunter</option>
        <option value="survivor">Survivor</option>
      </select>
      <select id="player-avatar">
        <option value="👻">👻</option>
        <option value="👽">👽</option>
        <option value="🤖">🤖</option>
        <option value="👾">👾</option>
        <option value="🎃">🎃</option>
        <option value="🧟">🧟</option>
        <option value="🧟‍♂️">🧟‍♂️</option>
        <option value="🧟‍♀️">🧟‍♀️</option>
        <option value="🧛">🧛</option>
        <option value="🧛‍♂️">🧛‍♂️</option>
        <option value="🧛‍♀️">🧛‍♀️</option>
      </select>
      <button onclick="registerPlayer()">Join Game</button>
    </div>
    <div id="game-map"></div>
    <div id="controls" style="display: none;">
      <button onclick="move('up')">↑</button><br>
      <button onclick="move('left')">←</button>
      <button onclick="move('right')">→</button><br>
      <button onclick="move('down')">↓</button>
      <br><br>
      <button onclick="resetGame()" style="background-color: #ff4444; color: white;">Reset Game</button>
    </div>
    <div id="status"></div>
  </div>

  <script>
    let ws;
    let playerName = '';
    let playerRole = '';
    let playerAvatar = '';

    // ページ読み込み時にWebSocket接続を開始
    window.onload = function() {
      connect();
    };

    function connect() {
      ws = new WebSocket('ws://' + window.location.host + '/websocket');
      
      ws.onmessage = function(event) {
        const data = JSON.parse(event.data);
        switch(data.type) {
          case 'register_success':
            document.getElementById('login-form').style.display = 'none';
            document.getElementById('controls').style.display = 'block';
            playerName = document.getElementById('player-name').value;
            playerRole = document.getElementById('player-role').value;
            playerAvatar = document.getElementById('player-avatar').value;
            break;
          case 'register_failed':
            alert(data.message);
            break;
          case 'game_state':
            updateGameState(data.state);
            break;
        }
      };
    }

    function registerPlayer() {
      const name = document.getElementById('player-name').value;
      const role = document.getElementById('player-role').value;
      const avatar = document.getElementById('player-avatar').value;
      if (name && role) {
        ws.send(JSON.stringify({
          type: 'register',
          name: name,
          role: role,
          avatar: avatar
        }));
      }
    }

    function move(direction) {
      ws.send(JSON.stringify({
        type: 'move',
        name: playerName,
        direction: direction
      }));
    }

    function resetGame() {
      if (confirm('Are you sure you want to reset the game? All players will be removed.')) {
        ws.send(JSON.stringify({
          type: 'reset'
        }));
        document.getElementById('login-form').style.display = 'flex';
        document.getElementById('controls').style.display = 'none';
        // ゲームオーバーポップアップを削除
        const gameOver = document.querySelector('.game-over');
        if (gameOver) {
          gameOver.remove();
        }
      }
    }

    function updateGameState(state) {
      // マップの更新
      const gameMap = document.getElementById('game-map');
      gameMap.innerHTML = '';

      // マップの生成
      for (let y = 8; y >= -8; y--) {
        for (let x = -8; x <= 8; x++) {
          const cell = document.createElement('div');
          cell.className = 'cell';
          
          // 脱出地点
          if (state.escape_point[0] === x && state.escape_point[1] === y) {
            cell.textContent = 'E';
            cell.classList.add('escape');
          }
          // 鍵
          else if (state.keys.some(key => key.position[0] === x && key.position[1] === y && !key.found)) {
            cell.textContent = 'K';
            cell.classList.add('key');
          }
          // プレイヤー
          else {
            let playerFound = false;
            for (const [name, player] of Object.entries(state.players)) {
              if (player.position[0] === x && player.position[1] === y) {
                cell.textContent = player.avatar;
                cell.classList.add(player.role);
                playerFound = true;
                break;
              }
            }
            if (!playerFound) {
              cell.textContent = '.';
            }
          }
          
          gameMap.appendChild(cell);
        }
      }

      // ステータスの更新
      const status = document.getElementById('status');
      status.innerHTML = `
        <h3>Game Status</h3>
        <p>Time remaining: ${state.game_state.time_remaining} seconds</p>
        <p>Keys found: ${state.game_state.keys_found}/${state.game_state.total_keys}</p>
        <h3>Players</h3>
        ${Object.entries(state.players).map(([name, player]) => `
          <div class="player-status">
            <p>${name} (${player.role}) ${player.avatar}</p>
            <p>Status: ${player.caught ? 'Caught' : player.escaped ? 'Escaped' : 'Active'}</p>
            ${player.role === 'survivor' ? `<p>Keys collected: ${player.keys_collected}</p>` : ''}
          </div>
        `).join('')}
      `;

      // ゲームオーバー時の表示
      if (state.game_state.game_over) {
        // 既存のゲームオーバーポップアップを削除
        const existingGameOver = document.querySelector('.game-over');
        if (existingGameOver) {
          existingGameOver.remove();
        }
        
        const gameOver = document.createElement('div');
        gameOver.className = 'game-over';
        gameOver.innerHTML = `
          <h2>Game Over!</h2>
          <p>Winner: ${state.game_state.winner}</p>
          <button onclick="resetGame()">Play Again</button>
        `;
        document.body.appendChild(gameOver);
      }
    }

    // キーボード操作の追加
    document.addEventListener('keydown', function(event) {
      if (document.getElementById('controls').style.display === 'none') return;
      
      switch(event.key) {
        case 'ArrowUp':
          move('up');
          break;
        case 'ArrowDown':
          move('down');
          break;
        case 'ArrowLeft':
          move('left');
          break;
        case 'ArrowRight':
          move('right');
          break;
      }
    });
  </script>
</body>
</html> 